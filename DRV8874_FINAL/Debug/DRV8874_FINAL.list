
DRV8874_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000721c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007410  08007410  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007410  08007410  00017410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007418  08007418  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007418  08007418  00017418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800741c  0800741c  0001741c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001188  20000010  08007430  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001198  08007430  00021198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b365  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003386  00000000  00000000  0003b3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  0003e730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  0003fe20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a396  00000000  00000000  000413d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c47  00000000  00000000  0006b76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010eaf1  00000000  00000000  000833b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00191ea6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006188  00000000  00000000  00191efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007394 	.word	0x08007394

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007394 	.word	0x08007394

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	2000002c 	.word	0x2000002c
 80004f8:	20000080 	.word	0x20000080

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fe2f 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f859 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fa69 	bl	80009e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050e:	f000 fa37 	bl	8000980 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000512:	f000 f8db 	bl	80006cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000516:	f000 f97f 	bl	8000818 <MX_TIM2_Init>
  MX_TIM4_Init();
 800051a:	f000 f9d7 	bl	80008cc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // PMODE
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000528:	f002 fcc4 	bl	8002eb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // nSLEEP
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f002 fcbd 	bl	8002eb4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800053a:	2100      	movs	r1, #0
 800053c:	4814      	ldr	r0, [pc, #80]	; (8000590 <main+0x94>)
 800053e:	f004 f939 	bl	80047b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000542:	2100      	movs	r1, #0
 8000544:	4813      	ldr	r0, [pc, #76]	; (8000594 <main+0x98>)
 8000546:	f004 f935 	bl	80047b4 <HAL_TIM_PWM_Start>

  xTaskCreate(ADC_TASK, "ADC", 128, NULL, 2, &ADC_Handler);
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <main+0x9c>)
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2302      	movs	r3, #2
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2300      	movs	r3, #0
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	4911      	ldr	r1, [pc, #68]	; (800059c <main+0xa0>)
 8000558:	4811      	ldr	r0, [pc, #68]	; (80005a0 <main+0xa4>)
 800055a:	f005 fe30 	bl	80061be <xTaskCreate>
  xTaskCreate(MOTOR_TASK, "MOTOR", 128, NULL, 2, &Motor_Handler);
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <main+0xa8>)
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	2302      	movs	r3, #2
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	490f      	ldr	r1, [pc, #60]	; (80005a8 <main+0xac>)
 800056c:	480f      	ldr	r0, [pc, #60]	; (80005ac <main+0xb0>)
 800056e:	f005 fe26 	bl	80061be <xTaskCreate>
  xTaskCreate(COIL_TASK, "COIL", 128, NULL, 2, &Coil_Handler);
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <main+0xb4>)
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2302      	movs	r3, #2
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	490d      	ldr	r1, [pc, #52]	; (80005b4 <main+0xb8>)
 8000580:	480d      	ldr	r0, [pc, #52]	; (80005b8 <main+0xbc>)
 8000582:	f005 fe1c 	bl	80061be <xTaskCreate>



  vTaskStartScheduler();
 8000586:	f005 ff85 	bl	8006494 <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800058a:	f005 fcec 	bl	8005f66 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058e:	e7fe      	b.n	800058e <main+0x92>
 8000590:	20001070 	.word	0x20001070
 8000594:	20000f98 	.word	0x20000f98
 8000598:	20000fe4 	.word	0x20000fe4
 800059c:	080073ac 	.word	0x080073ac
 80005a0:	08000ad1 	.word	0x08000ad1
 80005a4:	20001064 	.word	0x20001064
 80005a8:	080073b0 	.word	0x080073b0
 80005ac:	08000c0d 	.word	0x08000c0d
 80005b0:	2000105c 	.word	0x2000105c
 80005b4:	080073b8 	.word	0x080073b8
 80005b8:	08000c85 	.word	0x08000c85

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0b8      	sub	sp, #224	; 0xe0
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005c6:	2244      	movs	r2, #68	; 0x44
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f006 feda 	bl	8007384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2288      	movs	r2, #136	; 0x88
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f006 fecc 	bl	8007384 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fa:	2310      	movs	r3, #16
 80005fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000606:	2302      	movs	r3, #2
 8000608:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000612:	230a      	movs	r3, #10
 8000614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000618:	2307      	movs	r3, #7
 800061a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fcbc 	bl	8002fac <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800063a:	f000 fb85 	bl	8000d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2303      	movs	r3, #3
 8000646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000660:	2104      	movs	r1, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f003 f888 	bl	8003778 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800066e:	f000 fb6b 	bl	8000d48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000672:	f244 0302 	movw	r3, #16386	; 0x4002
 8000676:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800067c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000680:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000682:	2302      	movs	r3, #2
 8000684:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800068a:	2308      	movs	r3, #8
 800068c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800068e:	2307      	movs	r3, #7
 8000690:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800069a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800069e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 faa0 	bl	8003be8 <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006ae:	f000 fb4b 	bl	8000d48 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b6:	f002 fc23 	bl	8002f00 <HAL_PWREx_ControlVoltageScaling>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80006c0:	f000 fb42 	bl	8000d48 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	37e0      	adds	r7, #224	; 0xe0
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
 80006ec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ee:	4b44      	ldr	r3, [pc, #272]	; (8000800 <MX_ADC1_Init+0x134>)
 80006f0:	4a44      	ldr	r2, [pc, #272]	; (8000804 <MX_ADC1_Init+0x138>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006f4:	4b42      	ldr	r3, [pc, #264]	; (8000800 <MX_ADC1_Init+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fa:	4b41      	ldr	r3, [pc, #260]	; (8000800 <MX_ADC1_Init+0x134>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000700:	4b3f      	ldr	r3, [pc, #252]	; (8000800 <MX_ADC1_Init+0x134>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000706:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <MX_ADC1_Init+0x134>)
 8000708:	2201      	movs	r2, #1
 800070a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070c:	4b3c      	ldr	r3, [pc, #240]	; (8000800 <MX_ADC1_Init+0x134>)
 800070e:	2204      	movs	r2, #4
 8000710:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000712:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <MX_ADC1_Init+0x134>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000718:	4b39      	ldr	r3, [pc, #228]	; (8000800 <MX_ADC1_Init+0x134>)
 800071a:	2201      	movs	r2, #1
 800071c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800071e:	4b38      	ldr	r3, [pc, #224]	; (8000800 <MX_ADC1_Init+0x134>)
 8000720:	2204      	movs	r2, #4
 8000722:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000724:	4b36      	ldr	r3, [pc, #216]	; (8000800 <MX_ADC1_Init+0x134>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b34      	ldr	r3, [pc, #208]	; (8000800 <MX_ADC1_Init+0x134>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000732:	4b33      	ldr	r3, [pc, #204]	; (8000800 <MX_ADC1_Init+0x134>)
 8000734:	2200      	movs	r2, #0
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000738:	4b31      	ldr	r3, [pc, #196]	; (8000800 <MX_ADC1_Init+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_ADC1_Init+0x134>)
 8000742:	2200      	movs	r2, #0
 8000744:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000746:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <MX_ADC1_Init+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074e:	482c      	ldr	r0, [pc, #176]	; (8000800 <MX_ADC1_Init+0x134>)
 8000750:	f000 ff9e 	bl	8001690 <HAL_ADC_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800075a:	f000 faf5 	bl	8000d48 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4825      	ldr	r0, [pc, #148]	; (8000800 <MX_ADC1_Init+0x134>)
 800076a:	f002 f84f 	bl	800280c <HAL_ADCEx_MultiModeConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000774:	f000 fae8 	bl	8000d48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_ADC1_Init+0x13c>)
 800077a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800077c:	2306      	movs	r3, #6
 800077e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000780:	2307      	movs	r3, #7
 8000782:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000784:	237f      	movs	r3, #127	; 0x7f
 8000786:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000788:	2304      	movs	r3, #4
 800078a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	481a      	ldr	r0, [pc, #104]	; (8000800 <MX_ADC1_Init+0x134>)
 8000796:	f001 faa5 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007a0:	f000 fad2 	bl	8000d48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC1_Init+0x140>)
 80007a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007a8:	230c      	movs	r3, #12
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4813      	ldr	r0, [pc, #76]	; (8000800 <MX_ADC1_Init+0x134>)
 80007b2:	f001 fa97 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80007bc:	f000 fac4 	bl	8000d48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_ADC1_Init+0x144>)
 80007c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007c4:	2312      	movs	r3, #18
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_ADC1_Init+0x134>)
 80007ce:	f001 fa89 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80007d8:	f000 fab6 	bl	8000d48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_ADC1_Init+0x148>)
 80007de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007e0:	2318      	movs	r3, #24
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_ADC1_Init+0x134>)
 80007ea:	f001 fa7b 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80007f4:	f000 faa8 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000fec 	.word	0x20000fec
 8000804:	50040000 	.word	0x50040000
 8000808:	04300002 	.word	0x04300002
 800080c:	08600004 	.word	0x08600004
 8000810:	0c900008 	.word	0x0c900008
 8000814:	10c00010 	.word	0x10c00010

08000818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082a:	463b      	mov	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]
 800083a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_TIM2_Init+0xb0>)
 800083e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000842:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_TIM2_Init+0xb0>)
 8000846:	2203      	movs	r2, #3
 8000848:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_TIM2_Init+0xb0>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_TIM2_Init+0xb0>)
 8000852:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000856:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_TIM2_Init+0xb0>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_TIM2_Init+0xb0>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000864:	4818      	ldr	r0, [pc, #96]	; (80008c8 <MX_TIM2_Init+0xb0>)
 8000866:	f003 ff4d 	bl	8004704 <HAL_TIM_PWM_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000870:	f000 fa6a 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4811      	ldr	r0, [pc, #68]	; (80008c8 <MX_TIM2_Init+0xb0>)
 8000884:	f004 fe8a 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800088e:	f000 fa5b 	bl	8000d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000892:	2360      	movs	r3, #96	; 0x60
 8000894:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	4807      	ldr	r0, [pc, #28]	; (80008c8 <MX_TIM2_Init+0xb0>)
 80008aa:	f004 f9a9 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80008b4:	f000 fa48 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <MX_TIM2_Init+0xb0>)
 80008ba:	f000 fae5 	bl	8000e88 <HAL_TIM_MspPostInit>

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20001070 	.word	0x20001070

080008cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008de:	463b      	mov	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
 80008ec:	615a      	str	r2, [r3, #20]
 80008ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_TIM4_Init+0xac>)
 80008f2:	4a22      	ldr	r2, [pc, #136]	; (800097c <MX_TIM4_Init+0xb0>)
 80008f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <MX_TIM4_Init+0xac>)
 80008f8:	2203      	movs	r2, #3
 80008fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_TIM4_Init+0xac>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_TIM4_Init+0xac>)
 8000904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000908:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_TIM4_Init+0xac>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_TIM4_Init+0xac>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000916:	4818      	ldr	r0, [pc, #96]	; (8000978 <MX_TIM4_Init+0xac>)
 8000918:	f003 fef4 	bl	8004704 <HAL_TIM_PWM_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000922:	f000 fa11 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4810      	ldr	r0, [pc, #64]	; (8000978 <MX_TIM4_Init+0xac>)
 8000936:	f004 fe31 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000940:	f000 fa02 	bl	8000d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000944:	2360      	movs	r3, #96	; 0x60
 8000946:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	4619      	mov	r1, r3
 800095a:	4807      	ldr	r0, [pc, #28]	; (8000978 <MX_TIM4_Init+0xac>)
 800095c:	f004 f950 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000966:	f000 f9ef 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <MX_TIM4_Init+0xac>)
 800096c:	f000 fa8c 	bl	8000e88 <HAL_TIM_MspPostInit>

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000f98 	.word	0x20000f98
 800097c:	40000800 	.word	0x40000800

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <MX_USART2_UART_Init+0x5c>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 800098c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009c4:	f004 fe90 	bl	80056e8 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 f9bb 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200010c0 	.word	0x200010c0
 80009dc:	40004400 	.word	0x40004400

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <MX_GPIO_Init+0xe4>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4a32      	ldr	r2, [pc, #200]	; (8000ac4 <MX_GPIO_Init+0xe4>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <MX_GPIO_Init+0xe4>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <MX_GPIO_Init+0xe4>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a2c      	ldr	r2, [pc, #176]	; (8000ac4 <MX_GPIO_Init+0xe4>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <MX_GPIO_Init+0xe4>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <MX_GPIO_Init+0xe4>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <MX_GPIO_Init+0xe4>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <MX_GPIO_Init+0xe4>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_GPIO_Init+0xe4>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a20      	ldr	r2, [pc, #128]	; (8000ac4 <MX_GPIO_Init+0xe4>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <MX_GPIO_Init+0xe4>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f002 fa28 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4814      	ldr	r0, [pc, #80]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a7a:	f002 f859 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 8000a7e:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9a:	f002 f849 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f002 f83b 	bl	8002b30 <HAL_GPIO_Init>

}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	; 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	10210000 	.word	0x10210000
 8000acc:	48000800 	.word	0x48000800

08000ad0 <ADC_TASK>:

/* USER CODE BEGIN 4 */
void ADC_TASK(void *pvParameters){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_ADC_Start(&hadc1);
 8000ad8:	4840      	ldr	r0, [pc, #256]	; (8000bdc <ADC_TASK+0x10c>)
 8000ada:	f000 ff2f 	bl	800193c <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ade:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae2:	483e      	ldr	r0, [pc, #248]	; (8000bdc <ADC_TASK+0x10c>)
 8000ae4:	f001 f818 	bl	8001b18 <HAL_ADC_PollForConversion>
		adc_location = HAL_ADC_GetValue(&hadc1);
 8000ae8:	483c      	ldr	r0, [pc, #240]	; (8000bdc <ADC_TASK+0x10c>)
 8000aea:	f001 f8ed 	bl	8001cc8 <HAL_ADC_GetValue>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a3b      	ldr	r2, [pc, #236]	; (8000be0 <ADC_TASK+0x110>)
 8000af2:	6013      	str	r3, [r2, #0]
		V_loc = (float)adc_location/4096*5;
 8000af4:	4b3a      	ldr	r3, [pc, #232]	; (8000be0 <ADC_TASK+0x110>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	ee07 3a90 	vmov	s15, r3
 8000afc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b00:	eddf 6a38 	vldr	s13, [pc, #224]	; 8000be4 <ADC_TASK+0x114>
 8000b04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b08:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b10:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <ADC_TASK+0x118>)
 8000b12:	edc3 7a00 	vstr	s15, [r3]


		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b16:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1a:	4830      	ldr	r0, [pc, #192]	; (8000bdc <ADC_TASK+0x10c>)
 8000b1c:	f000 fffc 	bl	8001b18 <HAL_ADC_PollForConversion>
		adc_pot  = HAL_ADC_GetValue(&hadc1);
 8000b20:	482e      	ldr	r0, [pc, #184]	; (8000bdc <ADC_TASK+0x10c>)
 8000b22:	f001 f8d1 	bl	8001cc8 <HAL_ADC_GetValue>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a30      	ldr	r2, [pc, #192]	; (8000bec <ADC_TASK+0x11c>)
 8000b2a:	6013      	str	r3, [r2, #0]
		V_pot = (float)adc_pot/4096*5;
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <ADC_TASK+0x11c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	ee07 3a90 	vmov	s15, r3
 8000b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b38:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000be4 <ADC_TASK+0x114>
 8000b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b40:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b48:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <ADC_TASK+0x120>)
 8000b4a:	edc3 7a00 	vstr	s15, [r3]


		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000b52:	4822      	ldr	r0, [pc, #136]	; (8000bdc <ADC_TASK+0x10c>)
 8000b54:	f000 ffe0 	bl	8001b18 <HAL_ADC_PollForConversion>
		adc_Iprop = HAL_ADC_GetValue(&hadc1);
 8000b58:	4820      	ldr	r0, [pc, #128]	; (8000bdc <ADC_TASK+0x10c>)
 8000b5a:	f001 f8b5 	bl	8001cc8 <HAL_ADC_GetValue>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a24      	ldr	r2, [pc, #144]	; (8000bf4 <ADC_TASK+0x124>)
 8000b62:	6013      	str	r3, [r2, #0]
		V_Iprop = (float)adc_Iprop/4096*5;
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <ADC_TASK+0x124>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	ee07 3a90 	vmov	s15, r3
 8000b6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b70:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8000be4 <ADC_TASK+0x114>
 8000b74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b78:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <ADC_TASK+0x128>)
 8000b82:	edc3 7a00 	vstr	s15, [r3]
		I_Iprop = V_Iprop/1500;//R_Iprop
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <ADC_TASK+0x128>)
 8000b88:	ed93 7a00 	vldr	s14, [r3]
 8000b8c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000bfc <ADC_TASK+0x12c>
 8000b90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <ADC_TASK+0x130>)
 8000b96:	edc3 7a00 	vstr	s15, [r3]

		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b9a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9e:	480f      	ldr	r0, [pc, #60]	; (8000bdc <ADC_TASK+0x10c>)
 8000ba0:	f000 ffba 	bl	8001b18 <HAL_ADC_PollForConversion>
		adc_Vref  = HAL_ADC_GetValue(&hadc1);
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <ADC_TASK+0x10c>)
 8000ba6:	f001 f88f 	bl	8001cc8 <HAL_ADC_GetValue>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <ADC_TASK+0x134>)
 8000bae:	6013      	str	r3, [r2, #0]
		V_vref = (float)adc_Vref/4096*5;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <ADC_TASK+0x134>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	ee07 3a90 	vmov	s15, r3
 8000bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bbc:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000be4 <ADC_TASK+0x114>
 8000bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bc4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <ADC_TASK+0x138>)
 8000bce:	edc3 7a00 	vstr	s15, [r3]

		HAL_ADC_Stop(&hadc1);
 8000bd2:	4802      	ldr	r0, [pc, #8]	; (8000bdc <ADC_TASK+0x10c>)
 8000bd4:	f000 ff6c 	bl	8001ab0 <HAL_ADC_Stop>
		HAL_ADC_Start(&hadc1);
 8000bd8:	e77e      	b.n	8000ad8 <ADC_TASK+0x8>
 8000bda:	bf00      	nop
 8000bdc:	20000fec 	.word	0x20000fec
 8000be0:	20001050 	.word	0x20001050
 8000be4:	45800000 	.word	0x45800000
 8000be8:	20001060 	.word	0x20001060
 8000bec:	200010bc 	.word	0x200010bc
 8000bf0:	2000106c 	.word	0x2000106c
 8000bf4:	20001054 	.word	0x20001054
 8000bf8:	20001068 	.word	0x20001068
 8000bfc:	44bb8000 	.word	0x44bb8000
 8000c00:	20000fe8 	.word	0x20000fe8
 8000c04:	20001058 	.word	0x20001058
 8000c08:	20001144 	.word	0x20001144

08000c0c <MOTOR_TASK>:
	*/
	}
}


void MOTOR_TASK(void *pvParameters){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(V_vref < V_Iprop || V_Iprop > V_pot){
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MOTOR_TASK+0x5c>)
 8000c16:	ed93 7a00 	vldr	s14, [r3]
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MOTOR_TASK+0x60>)
 8000c1c:	edd3 7a00 	vldr	s15, [r3]
 8000c20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c28:	d40a      	bmi.n	8000c40 <MOTOR_TASK+0x34>
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MOTOR_TASK+0x60>)
 8000c2c:	ed93 7a00 	vldr	s14, [r3]
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MOTOR_TASK+0x64>)
 8000c32:	edd3 7a00 	vldr	s15, [r3]
 8000c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c3e:	dd05      	ble.n	8000c4c <MOTOR_TASK+0x40>
			CWPWM = 0;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MOTOR_TASK+0x68>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	801a      	strh	r2, [r3, #0]
			CCWPWM = 0;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MOTOR_TASK+0x6c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	801a      	strh	r2, [r3, #0]
		}
		htim2.Instance->CCR1 = CWPWM;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MOTOR_TASK+0x68>)
 8000c4e:	881a      	ldrh	r2, [r3, #0]
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MOTOR_TASK+0x70>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR1 = CCWPWM;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MOTOR_TASK+0x6c>)
 8000c58:	881a      	ldrh	r2, [r3, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MOTOR_TASK+0x74>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34

		osDelay(50);
 8000c60:	2032      	movs	r0, #50	; 0x32
 8000c62:	f005 f987 	bl	8005f74 <osDelay>
		if(V_vref < V_Iprop || V_Iprop > V_pot){
 8000c66:	e7d5      	b.n	8000c14 <MOTOR_TASK+0x8>
 8000c68:	20001144 	.word	0x20001144
 8000c6c:	20001068 	.word	0x20001068
 8000c70:	2000106c 	.word	0x2000106c
 8000c74:	20000280 	.word	0x20000280
 8000c78:	20000282 	.word	0x20000282
 8000c7c:	20001070 	.word	0x20001070
 8000c80:	20000f98 	.word	0x20000f98

08000c84 <COIL_TASK>:
	}
}



void COIL_TASK(void *pvParameters){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(CWPWM == 0 && CCWPWM == 0){
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <COIL_TASK+0x8c>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d110      	bne.n	8000cb6 <COIL_TASK+0x32>
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <COIL_TASK+0x90>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d10c      	bne.n	8000cb6 <COIL_TASK+0x32>
			if(adc_location > 3500){
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <COIL_TASK+0x94>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d903      	bls.n	8000cb0 <COIL_TASK+0x2c>
					isClockWise = 0;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <COIL_TASK+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e002      	b.n	8000cb6 <COIL_TASK+0x32>
			}else{
					isClockWise = 1;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <COIL_TASK+0x98>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
			}
		}

		if(HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET){
 8000cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cba:	4819      	ldr	r0, [pc, #100]	; (8000d20 <COIL_TASK+0x9c>)
 8000cbc:	f002 f8e2 	bl	8002e84 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d120      	bne.n	8000d08 <COIL_TASK+0x84>
			if(isClockWise == 1){
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <COIL_TASK+0x98>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d10a      	bne.n	8000ce4 <COIL_TASK+0x60>
				CWPWM = 0;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <COIL_TASK+0x8c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	801a      	strh	r2, [r3, #0]
				CCWPWM = 1000;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <COIL_TASK+0x90>)
 8000cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cda:	801a      	strh	r2, [r3, #0]
				isClockWise = 0;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <COIL_TASK+0x98>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	e00d      	b.n	8000d00 <COIL_TASK+0x7c>
			}else if(isClockWise == 0){
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <COIL_TASK+0x98>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d109      	bne.n	8000d00 <COIL_TASK+0x7c>
				CWPWM = 1000;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <COIL_TASK+0x8c>)
 8000cee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cf2:	801a      	strh	r2, [r3, #0]
				CCWPWM = 0;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <COIL_TASK+0x90>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	801a      	strh	r2, [r3, #0]
				isClockWise = 1;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <COIL_TASK+0x98>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
			}
			HAL_Delay(1000);
 8000d00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d04:	f000 fa6e 	bl	80011e4 <HAL_Delay>
		}

		osDelay(100);
 8000d08:	2064      	movs	r0, #100	; 0x64
 8000d0a:	f005 f933 	bl	8005f74 <osDelay>
		if(CWPWM == 0 && CCWPWM == 0){
 8000d0e:	e7bd      	b.n	8000c8c <COIL_TASK+0x8>
 8000d10:	20000280 	.word	0x20000280
 8000d14:	20000282 	.word	0x20000282
 8000d18:	20001050 	.word	0x20001050
 8000d1c:	20000284 	.word	0x20000284
 8000d20:	48000800 	.word	0x48000800

08000d24 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE END 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM15) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d101      	bne.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d36:	f000 fa35 	bl	80011a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40014000 	.word	0x40014000

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6613      	str	r3, [r2, #96]	; 0x60
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	f06f 0001 	mvn.w	r0, #1
 8000d92:	f001 fea3 	bl	8002adc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <HAL_ADC_MspInit+0x74>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d123      	bne.n	8000e0e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_ADC_MspInit+0x78>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <HAL_ADC_MspInit+0x78>)
 8000dcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_ADC_MspInit+0x78>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_ADC_MspInit+0x78>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_ADC_MspInit+0x78>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_ADC_MspInit+0x78>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000df6:	230f      	movs	r3, #15
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dfa:	230b      	movs	r3, #11
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_ADC_MspInit+0x7c>)
 8000e0a:	f001 fe91 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	; 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	50040000 	.word	0x50040000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48000800 	.word	0x48000800

08000e24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e34:	d10c      	bne.n	8000e50 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6593      	str	r3, [r2, #88]	; 0x58
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e4e:	e010      	b.n	8000e72 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <HAL_TIM_PWM_MspInit+0x60>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d10b      	bne.n	8000e72 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6593      	str	r3, [r2, #88]	; 0x58
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40000800 	.word	0x40000800

08000e88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea8:	d11d      	bne.n	8000ee6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_TIM_MspPostInit+0xa8>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <HAL_TIM_MspPostInit+0xa8>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_TIM_MspPostInit+0xa8>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f001 fe26 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ee4:	e020      	b.n	8000f28 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <HAL_TIM_MspPostInit+0xac>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d11b      	bne.n	8000f28 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_TIM_MspPostInit+0xa8>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_TIM_MspPostInit+0xa8>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_TIM_MspPostInit+0xa8>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_TIM_MspPostInit+0xb0>)
 8000f24:	f001 fe04 	bl	8002b30 <HAL_GPIO_Init>
}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40000800 	.word	0x40000800
 8000f38:	48000400 	.word	0x48000400

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0x7c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d128      	bne.n	8000fb0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f8e:	230c      	movs	r3, #12
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fac:	f001 fdc0 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40004400 	.word	0x40004400
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	; 0x30
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM15 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, TickPriority ,0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	2018      	movs	r0, #24
 8000fd6:	f001 fd81 	bl	8002adc <HAL_NVIC_SetPriority>

  /* Enable the TIM15 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000fda:	2018      	movs	r0, #24
 8000fdc:	f001 fd9a 	bl	8002b14 <HAL_NVIC_EnableIRQ>
  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	; (800105c <HAL_InitTick+0x9c>)
 8000fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe4:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_InitTick+0x9c>)
 8000fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fea:	6613      	str	r3, [r2, #96]	; 0x60
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_InitTick+0x9c>)
 8000fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ff8:	f107 0210 	add.w	r2, r7, #16
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f002 fd5e 	bl	8003ac4 <HAL_RCC_GetClockConfig>

  /* Compute TIM15 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001008:	f002 fd46 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 800100c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	4a13      	ldr	r2, [pc, #76]	; (8001060 <HAL_InitTick+0xa0>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	0c9b      	lsrs	r3, r3, #18
 8001018:	3b01      	subs	r3, #1
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_InitTick+0xa4>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <HAL_InitTick+0xa8>)
 8001020:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HAL_InitTick+0xa4>)
 8001024:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001028:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <HAL_InitTick+0xa4>)
 800102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102e:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_InitTick+0xa4>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_InitTick+0xa4>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim15) == HAL_OK)
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <HAL_InitTick+0xa4>)
 800103e:	f003 fa8f 	bl	8004560 <HAL_TIM_Base_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d104      	bne.n	8001052 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim15);
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <HAL_InitTick+0xa4>)
 800104a:	f003 faeb 	bl	8004624 <HAL_TIM_Base_Start_IT>
 800104e:	4603      	mov	r3, r0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3730      	adds	r7, #48	; 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000
 8001060:	431bde83 	.word	0x431bde83
 8001064:	20001148 	.word	0x20001148
 8001068:	40014000 	.word	0x40014000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800109e:	f003 fc8f 	bl	80049c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20001148 	.word	0x20001148

080010ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <SystemInit+0x5c>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a14      	ldr	r2, [pc, #80]	; (8001108 <SystemInit+0x5c>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <SystemInit+0x60>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a11      	ldr	r2, [pc, #68]	; (800110c <SystemInit+0x60>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <SystemInit+0x60>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <SystemInit+0x60>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a0d      	ldr	r2, [pc, #52]	; (800110c <SystemInit+0x60>)
 80010d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <SystemInit+0x60>)
 80010e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <SystemInit+0x60>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <SystemInit+0x60>)
 80010f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <SystemInit+0x60>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	40021000 	.word	0x40021000

08001110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001114:	f7ff ffca 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001118:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800111a:	e003      	b.n	8001124 <LoopCopyDataInit>

0800111c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800111e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001120:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001122:	3104      	adds	r1, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001124:	480a      	ldr	r0, [pc, #40]	; (8001150 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001128:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800112a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800112c:	d3f6      	bcc.n	800111c <CopyDataInit>
	ldr	r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001130:	e002      	b.n	8001138 <LoopFillZerobss>

08001132 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001132:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001134:	f842 3b04 	str.w	r3, [r2], #4

08001138 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <LoopForever+0x16>)
	cmp	r2, r3
 800113a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800113c:	d3f9      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113e:	f006 f8fd 	bl	800733c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001142:	f7ff f9db 	bl	80004fc <main>

08001146 <LoopForever>:

LoopForever:
    b LoopForever
 8001146:	e7fe      	b.n	8001146 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001148:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800114c:	08007420 	.word	0x08007420
	ldr	r0, =_sdata
 8001150:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001154:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001158:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800115c:	20001198 	.word	0x20001198

08001160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_2_IRQHandler>
	...

08001164 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_Init+0x3c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <HAL_Init+0x3c>)
 8001174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001178:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117a:	2003      	movs	r0, #3
 800117c:	f001 fca3 	bl	8002ac6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff ff1d 	bl	8000fc0 <HAL_InitTick>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	e001      	b.n	8001196 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001192:	f7ff fddf 	bl	8000d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001196:	79fb      	ldrb	r3, [r7, #7]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40022000 	.word	0x40022000

080011a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20001194 	.word	0x20001194

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20001194 	.word	0x20001194

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff ffee 	bl	80011cc <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffde 	bl	80011cc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008

0800122c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	609a      	str	r2, [r3, #8]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	609a      	str	r2, [r3, #8]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3360      	adds	r3, #96	; 0x60
 80012a6:	461a      	mov	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <LL_ADC_SetOffset+0x44>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	4313      	orrs	r3, r2
 80012c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012cc:	bf00      	nop
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	03fff000 	.word	0x03fff000

080012dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3360      	adds	r3, #96	; 0x60
 80012ea:	461a      	mov	r2, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3360      	adds	r3, #96	; 0x60
 8001318:	461a      	mov	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	431a      	orrs	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001332:	bf00      	nop
 8001334:	371c      	adds	r7, #28
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3330      	adds	r3, #48	; 0x30
 8001374:	461a      	mov	r2, r3
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	4413      	add	r3, r2
 8001382:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	211f      	movs	r1, #31
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	401a      	ands	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	0e9b      	lsrs	r3, r3, #26
 800139c:	f003 011f 	and.w	r1, r3, #31
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	431a      	orrs	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013b0:	bf00      	nop
 80013b2:	371c      	adds	r7, #28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013bc:	b480      	push	{r7}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3314      	adds	r3, #20
 80013cc:	461a      	mov	r2, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	0e5b      	lsrs	r3, r3, #25
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	4413      	add	r3, r2
 80013da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	0d1b      	lsrs	r3, r3, #20
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	2107      	movs	r1, #7
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	401a      	ands	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	0d1b      	lsrs	r3, r3, #20
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800142c:	43db      	mvns	r3, r3
 800142e:	401a      	ands	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0318 	and.w	r3, r3, #24
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001438:	40d9      	lsrs	r1, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	400b      	ands	r3, r1
 800143e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001442:	431a      	orrs	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	0007ffff 	.word	0x0007ffff

0800145c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 031f 	and.w	r3, r3, #31
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6093      	str	r3, [r2, #8]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014cc:	d101      	bne.n	80014d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800151c:	d101      	bne.n	8001522 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800156c:	f043 0202 	orr.w	r2, r3, #2
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <LL_ADC_IsEnabled+0x18>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <LL_ADC_IsEnabled+0x1a>
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d101      	bne.n	80015be <LL_ADC_IsDisableOngoing+0x18>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_ADC_IsDisableOngoing+0x1a>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015e0:	f043 0204 	orr.w	r2, r3, #4
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001604:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001608:	f043 0210 	orr.w	r2, r3, #16
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b04      	cmp	r3, #4
 800162e:	d101      	bne.n	8001634 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001652:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001656:	f043 0220 	orr.w	r2, r3, #32
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b08      	cmp	r3, #8
 800167c:	d101      	bne.n	8001682 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e136      	b.n	8001918 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fb73 	bl	8000da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fef1 	bl	80014b8 <LL_ADC_IsDeepPowerDownEnabled>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fed7 	bl	8001494 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff0c 	bl	8001508 <LL_ADC_IsInternalRegulatorEnabled>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d115      	bne.n	8001722 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fef0 	bl	80014e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001700:	4b87      	ldr	r3, [pc, #540]	; (8001920 <HAL_ADC_Init+0x290>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	4a87      	ldr	r2, [pc, #540]	; (8001924 <HAL_ADC_Init+0x294>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	3301      	adds	r3, #1
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001714:	e002      	b.n	800171c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3b01      	subs	r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f9      	bne.n	8001716 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff feee 	bl	8001508 <LL_ADC_IsInternalRegulatorEnabled>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10d      	bne.n	800174e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001736:	f043 0210 	orr.w	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff62 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 8001758:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b00      	cmp	r3, #0
 8001764:	f040 80cf 	bne.w	8001906 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 80cb 	bne.w	8001906 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001774:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001778:	f043 0202 	orr.w	r2, r3, #2
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fefb 	bl	8001580 <LL_ADC_IsEnabled>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d115      	bne.n	80017bc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001790:	4865      	ldr	r0, [pc, #404]	; (8001928 <HAL_ADC_Init+0x298>)
 8001792:	f7ff fef5 	bl	8001580 <LL_ADC_IsEnabled>
 8001796:	4604      	mov	r4, r0
 8001798:	4864      	ldr	r0, [pc, #400]	; (800192c <HAL_ADC_Init+0x29c>)
 800179a:	f7ff fef1 	bl	8001580 <LL_ADC_IsEnabled>
 800179e:	4603      	mov	r3, r0
 80017a0:	431c      	orrs	r4, r3
 80017a2:	4863      	ldr	r0, [pc, #396]	; (8001930 <HAL_ADC_Init+0x2a0>)
 80017a4:	f7ff feec 	bl	8001580 <LL_ADC_IsEnabled>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4323      	orrs	r3, r4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4619      	mov	r1, r3
 80017b6:	485f      	ldr	r0, [pc, #380]	; (8001934 <HAL_ADC_Init+0x2a4>)
 80017b8:	f7ff fd38 	bl	800122c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7e5b      	ldrb	r3, [r3, #25]
 80017c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80017cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80017d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d106      	bne.n	80017f8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	3b01      	subs	r3, #1
 80017f0:	045b      	lsls	r3, r3, #17
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d009      	beq.n	8001814 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_ADC_Init+0x2a8>)
 800181c:	4013      	ands	r3, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	69b9      	ldr	r1, [r7, #24]
 8001824:	430b      	orrs	r3, r1
 8001826:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fef5 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 8001832:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff16 	bl	800166a <LL_ADC_INJ_IsConversionOngoing>
 800183e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d13d      	bne.n	80018c2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d13a      	bne.n	80018c2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001850:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001858:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001868:	f023 0302 	bic.w	r3, r3, #2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	69b9      	ldr	r1, [r7, #24]
 8001872:	430b      	orrs	r3, r1
 8001874:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800187c:	2b01      	cmp	r3, #1
 800187e:	d118      	bne.n	80018b2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800188a:	f023 0304 	bic.w	r3, r3, #4
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001896:	4311      	orrs	r1, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800189c:	4311      	orrs	r1, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018a2:	430a      	orrs	r2, r1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	e007      	b.n	80018c2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d10c      	bne.n	80018e4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	f023 010f 	bic.w	r1, r3, #15
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	1e5a      	subs	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
 80018e2:	e007      	b.n	80018f4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 020f 	bic.w	r2, r2, #15
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	f023 0303 	bic.w	r3, r3, #3
 80018fc:	f043 0201 	orr.w	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	655a      	str	r2, [r3, #84]	; 0x54
 8001904:	e007      	b.n	8001916 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190a:	f043 0210 	orr.w	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001916:	7ffb      	ldrb	r3, [r7, #31]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3724      	adds	r7, #36	; 0x24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd90      	pop	{r4, r7, pc}
 8001920:	20000000 	.word	0x20000000
 8001924:	053e2d63 	.word	0x053e2d63
 8001928:	50040000 	.word	0x50040000
 800192c:	50040100 	.word	0x50040100
 8001930:	50040200 	.word	0x50040200
 8001934:	50040300 	.word	0x50040300
 8001938:	fff0c007 	.word	0xfff0c007

0800193c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001944:	4857      	ldr	r0, [pc, #348]	; (8001aa4 <HAL_ADC_Start+0x168>)
 8001946:	f7ff fd89 	bl	800145c <LL_ADC_GetMultimode>
 800194a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fe63 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 809c 	bne.w	8001a96 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_ADC_Start+0x30>
 8001968:	2302      	movs	r3, #2
 800196a:	e097      	b.n	8001a9c <HAL_ADC_Start+0x160>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fe61 	bl	800263c <ADC_Enable>
 800197a:	4603      	mov	r3, r0
 800197c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800197e:	7dfb      	ldrb	r3, [r7, #23]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f040 8083 	bne.w	8001a8c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a42      	ldr	r2, [pc, #264]	; (8001aa8 <HAL_ADC_Start+0x16c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d002      	beq.n	80019aa <HAL_ADC_Start+0x6e>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	e000      	b.n	80019ac <HAL_ADC_Start+0x70>
 80019aa:	4b40      	ldr	r3, [pc, #256]	; (8001aac <HAL_ADC_Start+0x170>)
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d002      	beq.n	80019ba <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d2:	d106      	bne.n	80019e2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	f023 0206 	bic.w	r2, r3, #6
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	659a      	str	r2, [r3, #88]	; 0x58
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	221c      	movs	r2, #28
 80019ee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2a      	ldr	r2, [pc, #168]	; (8001aa8 <HAL_ADC_Start+0x16c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d002      	beq.n	8001a08 <HAL_ADC_Start+0xcc>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	e000      	b.n	8001a0a <HAL_ADC_Start+0xce>
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <HAL_ADC_Start+0x170>)
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d008      	beq.n	8001a24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d002      	beq.n	8001a24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	2b09      	cmp	r3, #9
 8001a22:	d114      	bne.n	8001a4e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fdc0 	bl	80015cc <LL_ADC_REG_StartConversion>
 8001a4c:	e025      	b.n	8001a9a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <HAL_ADC_Start+0x16c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d002      	beq.n	8001a6a <HAL_ADC_Start+0x12e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	e000      	b.n	8001a6c <HAL_ADC_Start+0x130>
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_ADC_Start+0x170>)
 8001a6c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00f      	beq.n	8001a9a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54
 8001a8a:	e006      	b.n	8001a9a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a94:	e001      	b.n	8001a9a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a96:	2302      	movs	r3, #2
 8001a98:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	50040300 	.word	0x50040300
 8001aa8:	50040100 	.word	0x50040100
 8001aac:	50040000 	.word	0x50040000

08001ab0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_Stop+0x16>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e023      	b.n	8001b0e <HAL_ADC_Stop+0x5e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001ace:	2103      	movs	r1, #3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fcf7 	bl	80024c4 <ADC_ConversionStop>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d111      	bne.n	8001b04 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fe0d 	bl	8002700 <ADC_Disable>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d109      	bne.n	8001b04 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001af8:	f023 0301 	bic.w	r3, r3, #1
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b22:	4866      	ldr	r0, [pc, #408]	; (8001cbc <HAL_ADC_PollForConversion+0x1a4>)
 8001b24:	f7ff fc9a 	bl	800145c <LL_ADC_GetMultimode>
 8001b28:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d102      	bne.n	8001b38 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b32:	2308      	movs	r3, #8
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	e02a      	b.n	8001b8e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d002      	beq.n	8001b4a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b09      	cmp	r3, #9
 8001b48:	d111      	bne.n	8001b6e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5c:	f043 0220 	orr.w	r2, r3, #32
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0a4      	b.n	8001cb2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b68:	2304      	movs	r3, #4
 8001b6a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b6c:	e00f      	b.n	8001b8e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b6e:	4853      	ldr	r0, [pc, #332]	; (8001cbc <HAL_ADC_PollForConversion+0x1a4>)
 8001b70:	f7ff fc82 	bl	8001478 <LL_ADC_GetMultiDMATransfer>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f043 0220 	orr.w	r2, r3, #32
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e093      	b.n	8001cb2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b8e:	f7ff fb1d 	bl	80011cc <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b94:	e021      	b.n	8001bda <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d01d      	beq.n	8001bda <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b9e:	f7ff fb15 	bl	80011cc <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d302      	bcc.n	8001bb4 <HAL_ADC_PollForConversion+0x9c>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d112      	bne.n	8001bda <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10b      	bne.n	8001bda <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc6:	f043 0204 	orr.w	r2, r3, #4
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e06b      	b.n	8001cb2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0d6      	beq.n	8001b96 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fba0 	bl	800133e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01c      	beq.n	8001c3e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7e5b      	ldrb	r3, [r3, #25]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d118      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d111      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d105      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_ADC_PollForConversion+0x1a8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d002      	beq.n	8001c4e <HAL_ADC_PollForConversion+0x136>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	e000      	b.n	8001c50 <HAL_ADC_PollForConversion+0x138>
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_ADC_PollForConversion+0x1ac>)
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d008      	beq.n	8001c6a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d002      	beq.n	8001c6a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b09      	cmp	r3, #9
 8001c68:	d104      	bne.n	8001c74 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	e00c      	b.n	8001c8e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <HAL_ADC_PollForConversion+0x1a8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d002      	beq.n	8001c84 <HAL_ADC_PollForConversion+0x16c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	e000      	b.n	8001c86 <HAL_ADC_PollForConversion+0x16e>
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_ADC_PollForConversion+0x1ac>)
 8001c86:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d104      	bne.n	8001c9e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2208      	movs	r2, #8
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	e008      	b.n	8001cb0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d103      	bne.n	8001cb0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	220c      	movs	r2, #12
 8001cae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	50040300 	.word	0x50040300
 8001cc0:	50040100 	.word	0x50040100
 8001cc4:	50040000 	.word	0x50040000

08001cc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0b6      	sub	sp, #216	; 0xd8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x22>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e3c7      	b.n	8002496 <HAL_ADC_ConfigChannel+0x7b2>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fc82 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 83a8 	bne.w	8002470 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d824      	bhi.n	8001d72 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	3b02      	subs	r3, #2
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d81b      	bhi.n	8001d6a <HAL_ADC_ConfigChannel+0x86>
 8001d32:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <HAL_ADC_ConfigChannel+0x54>)
 8001d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d38:	08001d49 	.word	0x08001d49
 8001d3c:	08001d51 	.word	0x08001d51
 8001d40:	08001d59 	.word	0x08001d59
 8001d44:	08001d61 	.word	0x08001d61
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	605a      	str	r2, [r3, #4]
          break;
 8001d4e:	e011      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2212      	movs	r2, #18
 8001d54:	605a      	str	r2, [r3, #4]
          break;
 8001d56:	e00d      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2218      	movs	r2, #24
 8001d5c:	605a      	str	r2, [r3, #4]
          break;
 8001d5e:	e009      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d66:	605a      	str	r2, [r3, #4]
          break;
 8001d68:	e004      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2206      	movs	r2, #6
 8001d6e:	605a      	str	r2, [r3, #4]
          break;
 8001d70:	e000      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d72:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	f7ff faef 	bl	8001364 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fc46 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 8001d90:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fc66 	bl	800166a <LL_ADC_INJ_IsConversionOngoing>
 8001d9e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001da2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 81a6 	bne.w	80020f8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 81a1 	bne.w	80020f8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6819      	ldr	r1, [r3, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f7ff fafa 	bl	80013bc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	08db      	lsrs	r3, r3, #3
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d00a      	beq.n	8001e00 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6919      	ldr	r1, [r3, #16]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dfa:	f7ff fa4b 	bl	8001294 <LL_ADC_SetOffset>
 8001dfe:	e17b      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fa68 	bl	80012dc <LL_ADC_GetOffsetChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10a      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x148>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fa5d 	bl	80012dc <LL_ADC_GetOffsetChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	0e9b      	lsrs	r3, r3, #26
 8001e26:	f003 021f 	and.w	r2, r3, #31
 8001e2a:	e01e      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x186>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fa52 	bl	80012dc <LL_ADC_GetOffsetChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	e004      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x19e>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	0e9b      	lsrs	r3, r3, #26
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	e018      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1d0>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	e004      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001eaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d106      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fa21 	bl	8001308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2101      	movs	r1, #1
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fa05 	bl	80012dc <LL_ADC_GetOffsetChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10a      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x20e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f9fa 	bl	80012dc <LL_ADC_GetOffsetChannel>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	0e9b      	lsrs	r3, r3, #26
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	e01e      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x24c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f9ef 	bl	80012dc <LL_ADC_GetOffsetChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001f20:	2320      	movs	r3, #32
 8001f22:	e004      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001f24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d105      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x264>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0e9b      	lsrs	r3, r3, #26
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	e018      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x296>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	e004      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d106      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	2101      	movs	r1, #1
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f9be 	bl	8001308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2102      	movs	r1, #2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff f9a2 	bl	80012dc <LL_ADC_GetOffsetChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x2d4>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f997 	bl	80012dc <LL_ADC_GetOffsetChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	0e9b      	lsrs	r3, r3, #26
 8001fb2:	f003 021f 	and.w	r2, r3, #31
 8001fb6:	e01e      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x312>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f98c 	bl	80012dc <LL_ADC_GetOffsetChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001fd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e004      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <HAL_ADC_ConfigChannel+0x32a>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	e016      	b.n	800203c <HAL_ADC_ConfigChannel+0x358>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002020:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002026:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800202e:	2320      	movs	r3, #32
 8002030:	e004      	b.n	800203c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002032:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800203c:	429a      	cmp	r2, r3
 800203e:	d106      	bne.n	800204e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	2102      	movs	r1, #2
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f95d 	bl	8001308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2103      	movs	r1, #3
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff f941 	bl	80012dc <LL_ADC_GetOffsetChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10a      	bne.n	800207a <HAL_ADC_ConfigChannel+0x396>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2103      	movs	r1, #3
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff f936 	bl	80012dc <LL_ADC_GetOffsetChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	0e9b      	lsrs	r3, r3, #26
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	e017      	b.n	80020aa <HAL_ADC_ConfigChannel+0x3c6>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2103      	movs	r1, #3
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff f92b 	bl	80012dc <LL_ADC_GetOffsetChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002094:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800209c:	2320      	movs	r3, #32
 800209e:	e003      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80020a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x3de>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	0e9b      	lsrs	r3, r3, #26
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	e011      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x402>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e003      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80020de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d106      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2200      	movs	r2, #0
 80020f0:	2103      	movs	r1, #3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f908 	bl	8001308 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fa3f 	bl	8001580 <LL_ADC_IsEnabled>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	f040 813f 	bne.w	8002388 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6819      	ldr	r1, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	461a      	mov	r2, r3
 8002118:	f7ff f97c 	bl	8001414 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a8e      	ldr	r2, [pc, #568]	; (800235c <HAL_ADC_ConfigChannel+0x678>)
 8002122:	4293      	cmp	r3, r2
 8002124:	f040 8130 	bne.w	8002388 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10b      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x46c>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	3301      	adds	r3, #1
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	2b09      	cmp	r3, #9
 8002146:	bf94      	ite	ls
 8002148:	2301      	movls	r3, #1
 800214a:	2300      	movhi	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e019      	b.n	8002184 <HAL_ADC_ConfigChannel+0x4a0>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800215e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002160:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002168:	2320      	movs	r3, #32
 800216a:	e003      	b.n	8002174 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800216c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	3301      	adds	r3, #1
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	2b09      	cmp	r3, #9
 800217c:	bf94      	ite	ls
 800217e:	2301      	movls	r3, #1
 8002180:	2300      	movhi	r3, #0
 8002182:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002184:	2b00      	cmp	r3, #0
 8002186:	d079      	beq.n	800227c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002190:	2b00      	cmp	r3, #0
 8002192:	d107      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x4c0>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0e9b      	lsrs	r3, r3, #26
 800219a:	3301      	adds	r3, #1
 800219c:	069b      	lsls	r3, r3, #26
 800219e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021a2:	e015      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x4ec>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80021bc:	2320      	movs	r3, #32
 80021be:	e003      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80021c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	3301      	adds	r3, #1
 80021ca:	069b      	lsls	r3, r3, #26
 80021cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x50c>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	3301      	adds	r3, #1
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	e017      	b.n	8002220 <HAL_ADC_ConfigChannel+0x53c>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002200:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e003      	b.n	8002214 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800220c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3301      	adds	r3, #1
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	ea42 0103 	orr.w	r1, r2, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x562>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	0e9b      	lsrs	r3, r3, #26
 8002236:	3301      	adds	r3, #1
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	051b      	lsls	r3, r3, #20
 8002244:	e018      	b.n	8002278 <HAL_ADC_ConfigChannel+0x594>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800225e:	2320      	movs	r3, #32
 8002260:	e003      	b.n	800226a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3301      	adds	r3, #1
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002278:	430b      	orrs	r3, r1
 800227a:	e080      	b.n	800237e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	2b00      	cmp	r3, #0
 8002286:	d107      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x5b4>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	3301      	adds	r3, #1
 8002290:	069b      	lsls	r3, r3, #26
 8002292:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002296:	e015      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x5e0>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e003      	b.n	80022bc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	069b      	lsls	r3, r3, #26
 80022c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d109      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x600>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0e9b      	lsrs	r3, r3, #26
 80022d6:	3301      	adds	r3, #1
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	e017      	b.n	8002314 <HAL_ADC_ConfigChannel+0x630>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	61fb      	str	r3, [r7, #28]
  return result;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	2101      	movs	r1, #1
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	ea42 0103 	orr.w	r1, r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10d      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x65c>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0e9b      	lsrs	r3, r3, #26
 800232a:	3301      	adds	r3, #1
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	3b1e      	subs	r3, #30
 8002338:	051b      	lsls	r3, r3, #20
 800233a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800233e:	e01d      	b.n	800237c <HAL_ADC_ConfigChannel+0x698>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	613b      	str	r3, [r7, #16]
  return result;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d103      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002358:	2320      	movs	r3, #32
 800235a:	e005      	b.n	8002368 <HAL_ADC_ConfigChannel+0x684>
 800235c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	3301      	adds	r3, #1
 800236a:	f003 021f 	and.w	r2, r3, #31
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	3b1e      	subs	r3, #30
 8002376:	051b      	lsls	r3, r3, #20
 8002378:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800237c:	430b      	orrs	r3, r1
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	6892      	ldr	r2, [r2, #8]
 8002382:	4619      	mov	r1, r3
 8002384:	f7ff f81a 	bl	80013bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b44      	ldr	r3, [pc, #272]	; (80024a0 <HAL_ADC_ConfigChannel+0x7bc>)
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d07a      	beq.n	800248a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002394:	4843      	ldr	r0, [pc, #268]	; (80024a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002396:	f7fe ff6f 	bl	8001278 <LL_ADC_GetCommonPathInternalCh>
 800239a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a41      	ldr	r2, [pc, #260]	; (80024a8 <HAL_ADC_ConfigChannel+0x7c4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d12c      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d126      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a3c      	ldr	r2, [pc, #240]	; (80024ac <HAL_ADC_ConfigChannel+0x7c8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d004      	beq.n	80023c8 <HAL_ADC_ConfigChannel+0x6e4>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a3b      	ldr	r2, [pc, #236]	; (80024b0 <HAL_ADC_ConfigChannel+0x7cc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d15d      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023d0:	4619      	mov	r1, r3
 80023d2:	4834      	ldr	r0, [pc, #208]	; (80024a4 <HAL_ADC_ConfigChannel+0x7c0>)
 80023d4:	f7fe ff3d 	bl	8001252 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d8:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_ADC_ConfigChannel+0x7d0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	4a36      	ldr	r2, [pc, #216]	; (80024b8 <HAL_ADC_ConfigChannel+0x7d4>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	099b      	lsrs	r3, r3, #6
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023f2:	e002      	b.n	80023fa <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f9      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002400:	e040      	b.n	8002484 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2d      	ldr	r2, [pc, #180]	; (80024bc <HAL_ADC_ConfigChannel+0x7d8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d118      	bne.n	800243e <HAL_ADC_ConfigChannel+0x75a>
 800240c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d112      	bne.n	800243e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a23      	ldr	r2, [pc, #140]	; (80024ac <HAL_ADC_ConfigChannel+0x7c8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d004      	beq.n	800242c <HAL_ADC_ConfigChannel+0x748>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d12d      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800242c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002434:	4619      	mov	r1, r3
 8002436:	481b      	ldr	r0, [pc, #108]	; (80024a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002438:	f7fe ff0b 	bl	8001252 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800243c:	e024      	b.n	8002488 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d120      	bne.n	800248a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800244c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d11a      	bne.n	800248a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a14      	ldr	r2, [pc, #80]	; (80024ac <HAL_ADC_ConfigChannel+0x7c8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d115      	bne.n	800248a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800245e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002462:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002466:	4619      	mov	r1, r3
 8002468:	480e      	ldr	r0, [pc, #56]	; (80024a4 <HAL_ADC_ConfigChannel+0x7c0>)
 800246a:	f7fe fef2 	bl	8001252 <LL_ADC_SetCommonPathInternalCh>
 800246e:	e00c      	b.n	800248a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	f043 0220 	orr.w	r2, r3, #32
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002482:	e002      	b.n	800248a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002484:	bf00      	nop
 8002486:	e000      	b.n	800248a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002488:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002492:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002496:	4618      	mov	r0, r3
 8002498:	37d8      	adds	r7, #216	; 0xd8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	80080000 	.word	0x80080000
 80024a4:	50040300 	.word	0x50040300
 80024a8:	c7520000 	.word	0xc7520000
 80024ac:	50040000 	.word	0x50040000
 80024b0:	50040200 	.word	0x50040200
 80024b4:	20000000 	.word	0x20000000
 80024b8:	053e2d63 	.word	0x053e2d63
 80024bc:	cb840000 	.word	0xcb840000
 80024c0:	80000001 	.word	0x80000001

080024c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff f89e 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 80024e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f8bf 	bl	800166a <LL_ADC_INJ_IsConversionOngoing>
 80024ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d103      	bne.n	80024fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8098 	beq.w	800262c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d02a      	beq.n	8002560 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7e5b      	ldrb	r3, [r3, #25]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d126      	bne.n	8002560 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7e1b      	ldrb	r3, [r3, #24]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d122      	bne.n	8002560 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800251a:	2301      	movs	r3, #1
 800251c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800251e:	e014      	b.n	800254a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	4a45      	ldr	r2, [pc, #276]	; (8002638 <ADC_ConversionStop+0x174>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d90d      	bls.n	8002544 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	f043 0210 	orr.w	r2, r3, #16
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e074      	b.n	800262e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	3301      	adds	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	d1e3      	bne.n	8002520 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2240      	movs	r2, #64	; 0x40
 800255e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d014      	beq.n	8002590 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f856 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00c      	beq.n	8002590 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff f813 	bl	80015a6 <LL_ADC_IsDisableOngoing>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d104      	bne.n	8002590 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f832 	bl	80015f4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d014      	beq.n	80025c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff f865 	bl	800166a <LL_ADC_INJ_IsConversionOngoing>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00c      	beq.n	80025c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fffb 	bl	80015a6 <LL_ADC_IsDisableOngoing>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff f841 	bl	8001642 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d005      	beq.n	80025d2 <ADC_ConversionStop+0x10e>
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d105      	bne.n	80025d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80025cc:	230c      	movs	r3, #12
 80025ce:	617b      	str	r3, [r7, #20]
        break;
 80025d0:	e005      	b.n	80025de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80025d2:	2308      	movs	r3, #8
 80025d4:	617b      	str	r3, [r7, #20]
        break;
 80025d6:	e002      	b.n	80025de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80025d8:	2304      	movs	r3, #4
 80025da:	617b      	str	r3, [r7, #20]
        break;
 80025dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80025de:	f7fe fdf5 	bl	80011cc <HAL_GetTick>
 80025e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025e4:	e01b      	b.n	800261e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025e6:	f7fe fdf1 	bl	80011cc <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d914      	bls.n	800261e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00d      	beq.n	800261e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f043 0210 	orr.w	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e007      	b.n	800262e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1dc      	bne.n	80025e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	a33fffff 	.word	0xa33fffff

0800263c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe ff99 	bl	8001580 <LL_ADC_IsEnabled>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d14d      	bne.n	80026f0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	4b28      	ldr	r3, [pc, #160]	; (80026fc <ADC_Enable+0xc0>)
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f043 0210 	orr.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e039      	b.n	80026f2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe ff54 	bl	8001530 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002688:	f7fe fda0 	bl	80011cc <HAL_GetTick>
 800268c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800268e:	e028      	b.n	80026e2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe ff73 	bl	8001580 <LL_ADC_IsEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d104      	bne.n	80026aa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe ff43 	bl	8001530 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026aa:	f7fe fd8f 	bl	80011cc <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d914      	bls.n	80026e2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d00d      	beq.n	80026e2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	f043 0210 	orr.w	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	f043 0201 	orr.w	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e007      	b.n	80026f2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d1cf      	bne.n	8002690 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	8000003f 	.word	0x8000003f

08002700 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe ff4a 	bl	80015a6 <LL_ADC_IsDisableOngoing>
 8002712:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe ff31 	bl	8001580 <LL_ADC_IsEnabled>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d047      	beq.n	80027b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d144      	bne.n	80027b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 030d 	and.w	r3, r3, #13
 8002734:	2b01      	cmp	r3, #1
 8002736:	d10c      	bne.n	8002752 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe ff0b 	bl	8001558 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2203      	movs	r2, #3
 8002748:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800274a:	f7fe fd3f 	bl	80011cc <HAL_GetTick>
 800274e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002750:	e029      	b.n	80027a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f043 0210 	orr.w	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	f043 0201 	orr.w	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e023      	b.n	80027b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800276e:	f7fe fd2d 	bl	80011cc <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d914      	bls.n	80027a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00d      	beq.n	80027a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	f043 0210 	orr.w	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e007      	b.n	80027b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1dc      	bne.n	800276e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <LL_ADC_IsEnabled>:
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <LL_ADC_IsEnabled+0x18>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <LL_ADC_IsEnabled+0x1a>
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_REG_IsConversionOngoing>:
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d101      	bne.n	80027fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b09f      	sub	sp, #124	; 0x7c
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002826:	2302      	movs	r3, #2
 8002828:	e093      	b.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002832:	2300      	movs	r3, #0
 8002834:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002836:	2300      	movs	r3, #0
 8002838:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a47      	ldr	r2, [pc, #284]	; (800295c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d102      	bne.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	e001      	b.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	f043 0220 	orr.w	r2, r3, #32
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e072      	b.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ffb8 	bl	80027e4 <LL_ADC_REG_IsConversionOngoing>
 8002874:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ffb2 	bl	80027e4 <LL_ADC_REG_IsConversionOngoing>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d154      	bne.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002888:	2b00      	cmp	r3, #0
 800288a:	d151      	bne.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800288c:	4b35      	ldr	r3, [pc, #212]	; (8002964 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800288e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d02c      	beq.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028aa:	035b      	lsls	r3, r3, #13
 80028ac:	430b      	orrs	r3, r1
 80028ae:	431a      	orrs	r2, r3
 80028b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028b4:	4829      	ldr	r0, [pc, #164]	; (800295c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028b6:	f7ff ff82 	bl	80027be <LL_ADC_IsEnabled>
 80028ba:	4604      	mov	r4, r0
 80028bc:	4828      	ldr	r0, [pc, #160]	; (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028be:	f7ff ff7e 	bl	80027be <LL_ADC_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	431c      	orrs	r4, r3
 80028c6:	4828      	ldr	r0, [pc, #160]	; (8002968 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80028c8:	f7ff ff79 	bl	80027be <LL_ADC_IsEnabled>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4323      	orrs	r3, r4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d137      	bne.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028dc:	f023 030f 	bic.w	r3, r3, #15
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	6811      	ldr	r1, [r2, #0]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	6892      	ldr	r2, [r2, #8]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	431a      	orrs	r2, r3
 80028ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028f0:	e028      	b.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028fe:	4817      	ldr	r0, [pc, #92]	; (800295c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002900:	f7ff ff5d 	bl	80027be <LL_ADC_IsEnabled>
 8002904:	4604      	mov	r4, r0
 8002906:	4816      	ldr	r0, [pc, #88]	; (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002908:	f7ff ff59 	bl	80027be <LL_ADC_IsEnabled>
 800290c:	4603      	mov	r3, r0
 800290e:	431c      	orrs	r4, r3
 8002910:	4815      	ldr	r0, [pc, #84]	; (8002968 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002912:	f7ff ff54 	bl	80027be <LL_ADC_IsEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	4323      	orrs	r3, r4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d112      	bne.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800291e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002926:	f023 030f 	bic.w	r3, r3, #15
 800292a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800292c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800292e:	e009      	b.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002942:	e000      	b.n	8002946 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002944:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800294e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002952:	4618      	mov	r0, r3
 8002954:	377c      	adds	r7, #124	; 0x7c
 8002956:	46bd      	mov	sp, r7
 8002958:	bd90      	pop	{r4, r7, pc}
 800295a:	bf00      	nop
 800295c:	50040000 	.word	0x50040000
 8002960:	50040100 	.word	0x50040100
 8002964:	50040300 	.word	0x50040300
 8002968:	50040200 	.word	0x50040200

0800296c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002988:	4013      	ands	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299e:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	60d3      	str	r3, [r2, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <__NVIC_GetPriorityGrouping+0x18>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	f003 0307 	and.w	r3, r3, #7
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	db0b      	blt.n	80029fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	4907      	ldr	r1, [pc, #28]	; (8002a08 <__NVIC_EnableIRQ+0x38>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	2001      	movs	r0, #1
 80029f2:	fa00 f202 	lsl.w	r2, r0, r2
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100

08002a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db0a      	blt.n	8002a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	490c      	ldr	r1, [pc, #48]	; (8002a58 <__NVIC_SetPriority+0x4c>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a34:	e00a      	b.n	8002a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4908      	ldr	r1, [pc, #32]	; (8002a5c <__NVIC_SetPriority+0x50>)
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	3b04      	subs	r3, #4
 8002a44:	0112      	lsls	r2, r2, #4
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	440b      	add	r3, r1
 8002a4a:	761a      	strb	r2, [r3, #24]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000e100 	.word	0xe000e100
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f1c3 0307 	rsb	r3, r3, #7
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	bf28      	it	cs
 8002a7e:	2304      	movcs	r3, #4
 8002a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3304      	adds	r3, #4
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d902      	bls.n	8002a90 <NVIC_EncodePriority+0x30>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3b03      	subs	r3, #3
 8002a8e:	e000      	b.n	8002a92 <NVIC_EncodePriority+0x32>
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	f04f 32ff 	mov.w	r2, #4294967295
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43d9      	mvns	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	4313      	orrs	r3, r2
         );
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ff4c 	bl	800296c <__NVIC_SetPriorityGrouping>
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002aee:	f7ff ff61 	bl	80029b4 <__NVIC_GetPriorityGrouping>
 8002af2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	6978      	ldr	r0, [r7, #20]
 8002afa:	f7ff ffb1 	bl	8002a60 <NVIC_EncodePriority>
 8002afe:	4602      	mov	r2, r0
 8002b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ff80 	bl	8002a0c <__NVIC_SetPriority>
}
 8002b0c:	bf00      	nop
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ff54 	bl	80029d0 <__NVIC_EnableIRQ>
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3e:	e17f      	b.n	8002e40 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8171 	beq.w	8002e3a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d00b      	beq.n	8002b78 <HAL_GPIO_Init+0x48>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d007      	beq.n	8002b78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b6c:	2b11      	cmp	r3, #17
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b12      	cmp	r3, #18
 8002b76:	d130      	bne.n	8002bda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bae:	2201      	movs	r2, #1
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	f003 0201 	and.w	r2, r3, #1
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d118      	bne.n	8002c18 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002bec:	2201      	movs	r2, #1
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	08db      	lsrs	r3, r3, #3
 8002c02:	f003 0201 	and.w	r2, r3, #1
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x128>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b12      	cmp	r3, #18
 8002c56:	d123      	bne.n	8002ca0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	08da      	lsrs	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3208      	adds	r2, #8
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	08da      	lsrs	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3208      	adds	r2, #8
 8002c9a:	6939      	ldr	r1, [r7, #16]
 8002c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80ac 	beq.w	8002e3a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	4b5f      	ldr	r3, [pc, #380]	; (8002e60 <HAL_GPIO_Init+0x330>)
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	4a5e      	ldr	r2, [pc, #376]	; (8002e60 <HAL_GPIO_Init+0x330>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6613      	str	r3, [r2, #96]	; 0x60
 8002cee:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <HAL_GPIO_Init+0x330>)
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cfa:	4a5a      	ldr	r2, [pc, #360]	; (8002e64 <HAL_GPIO_Init+0x334>)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	3302      	adds	r3, #2
 8002d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	220f      	movs	r2, #15
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d24:	d025      	beq.n	8002d72 <HAL_GPIO_Init+0x242>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a4f      	ldr	r2, [pc, #316]	; (8002e68 <HAL_GPIO_Init+0x338>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01f      	beq.n	8002d6e <HAL_GPIO_Init+0x23e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4e      	ldr	r2, [pc, #312]	; (8002e6c <HAL_GPIO_Init+0x33c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_GPIO_Init+0x23a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4d      	ldr	r2, [pc, #308]	; (8002e70 <HAL_GPIO_Init+0x340>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0x236>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <HAL_GPIO_Init+0x344>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00d      	beq.n	8002d62 <HAL_GPIO_Init+0x232>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4b      	ldr	r2, [pc, #300]	; (8002e78 <HAL_GPIO_Init+0x348>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_Init+0x22e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4a      	ldr	r2, [pc, #296]	; (8002e7c <HAL_GPIO_Init+0x34c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_GPIO_Init+0x22a>
 8002d56:	2306      	movs	r3, #6
 8002d58:	e00c      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d5a:	2307      	movs	r3, #7
 8002d5c:	e00a      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d5e:	2305      	movs	r3, #5
 8002d60:	e008      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d62:	2304      	movs	r3, #4
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d66:	2303      	movs	r3, #3
 8002d68:	e004      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d72:	2300      	movs	r3, #0
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	f002 0203 	and.w	r2, r2, #3
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	4093      	lsls	r3, r2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d84:	4937      	ldr	r1, [pc, #220]	; (8002e64 <HAL_GPIO_Init+0x334>)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002db6:	4a32      	ldr	r2, [pc, #200]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002dbc:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002de0:	4a27      	ldr	r2, [pc, #156]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e34:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f47f ae78 	bne.w	8002b40 <HAL_GPIO_Init+0x10>
  }
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40010000 	.word	0x40010000
 8002e68:	48000400 	.word	0x48000400
 8002e6c:	48000800 	.word	0x48000800
 8002e70:	48000c00 	.word	0x48000c00
 8002e74:	48001000 	.word	0x48001000
 8002e78:	48001400 	.word	0x48001400
 8002e7c:	48001800 	.word	0x48001800
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	e001      	b.n	8002ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec4:	787b      	ldrb	r3, [r7, #1]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eca:	887a      	ldrh	r2, [r7, #2]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ed0:	e002      	b.n	8002ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ed2:	887a      	ldrh	r2, [r7, #2]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <HAL_PWREx_GetVoltageRange+0x18>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40007000 	.word	0x40007000

08002f00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f0e:	d130      	bne.n	8002f72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f10:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1c:	d038      	beq.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f26:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2232      	movs	r2, #50	; 0x32
 8002f34:	fb02 f303 	mul.w	r3, r2, r3
 8002f38:	4a1b      	ldr	r2, [pc, #108]	; (8002fa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	0c9b      	lsrs	r3, r3, #18
 8002f40:	3301      	adds	r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f44:	e002      	b.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f58:	d102      	bne.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f2      	bne.n	8002f46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f60:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6c:	d110      	bne.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e00f      	b.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7e:	d007      	beq.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f88:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	431bde83 	.word	0x431bde83

08002fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e3d4      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fbe:	4ba1      	ldr	r3, [pc, #644]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc8:	4b9e      	ldr	r3, [pc, #632]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80e4 	beq.w	80031a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x4a>
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	f040 808b 	bne.w	8003104 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	f040 8087 	bne.w	8003104 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ff6:	4b93      	ldr	r3, [pc, #588]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_RCC_OscConfig+0x62>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e3ac      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	4b8c      	ldr	r3, [pc, #560]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <HAL_RCC_OscConfig+0x7c>
 800301e:	4b89      	ldr	r3, [pc, #548]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003026:	e005      	b.n	8003034 <HAL_RCC_OscConfig+0x88>
 8003028:	4b86      	ldr	r3, [pc, #536]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800302a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003034:	4293      	cmp	r3, r2
 8003036:	d223      	bcs.n	8003080 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fd73 	bl	8003b28 <RCC_SetFlashLatencyFromMSIRange>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e38d      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800304c:	4b7d      	ldr	r3, [pc, #500]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a7c      	ldr	r2, [pc, #496]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003052:	f043 0308 	orr.w	r3, r3, #8
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b7a      	ldr	r3, [pc, #488]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	4977      	ldr	r1, [pc, #476]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800306a:	4b76      	ldr	r3, [pc, #472]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	4972      	ldr	r1, [pc, #456]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
 800307e:	e025      	b.n	80030cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003080:	4b70      	ldr	r3, [pc, #448]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6f      	ldr	r2, [pc, #444]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003086:	f043 0308 	orr.w	r3, r3, #8
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b6d      	ldr	r3, [pc, #436]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	496a      	ldr	r1, [pc, #424]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800309e:	4b69      	ldr	r3, [pc, #420]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	4965      	ldr	r1, [pc, #404]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fd33 	bl	8003b28 <RCC_SetFlashLatencyFromMSIRange>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e34d      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030cc:	f000 fc36 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80030d0:	4602      	mov	r2, r0
 80030d2:	4b5c      	ldr	r3, [pc, #368]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	495a      	ldr	r1, [pc, #360]	; (8003248 <HAL_RCC_OscConfig+0x29c>)
 80030de:	5ccb      	ldrb	r3, [r1, r3]
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
 80030e8:	4a58      	ldr	r2, [pc, #352]	; (800324c <HAL_RCC_OscConfig+0x2a0>)
 80030ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030ec:	4b58      	ldr	r3, [pc, #352]	; (8003250 <HAL_RCC_OscConfig+0x2a4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd ff65 	bl	8000fc0 <HAL_InitTick>
 80030f6:	4603      	mov	r3, r0
 80030f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d052      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	e331      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d032      	beq.n	8003172 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800310c:	4b4d      	ldr	r3, [pc, #308]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a4c      	ldr	r2, [pc, #304]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003118:	f7fe f858 	bl	80011cc <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003120:	f7fe f854 	bl	80011cc <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e31a      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003132:	4b44      	ldr	r3, [pc, #272]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800313e:	4b41      	ldr	r3, [pc, #260]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a40      	ldr	r2, [pc, #256]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003144:	f043 0308 	orr.w	r3, r3, #8
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b3e      	ldr	r3, [pc, #248]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	493b      	ldr	r1, [pc, #236]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	4936      	ldr	r1, [pc, #216]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
 8003170:	e01a      	b.n	80031a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003172:	4b34      	ldr	r3, [pc, #208]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a33      	ldr	r2, [pc, #204]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800317e:	f7fe f825 	bl	80011cc <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003186:	f7fe f821 	bl	80011cc <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e2e7      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003198:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0x1da>
 80031a4:	e000      	b.n	80031a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d074      	beq.n	800329e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d005      	beq.n	80031c6 <HAL_RCC_OscConfig+0x21a>
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d10e      	bne.n	80031de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d10b      	bne.n	80031de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c6:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d064      	beq.n	800329c <HAL_RCC_OscConfig+0x2f0>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d160      	bne.n	800329c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e2c4      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e6:	d106      	bne.n	80031f6 <HAL_RCC_OscConfig+0x24a>
 80031e8:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 80031ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	e01d      	b.n	8003232 <HAL_RCC_OscConfig+0x286>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031fe:	d10c      	bne.n	800321a <HAL_RCC_OscConfig+0x26e>
 8003200:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	e00b      	b.n	8003232 <HAL_RCC_OscConfig+0x286>
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a09      	ldr	r2, [pc, #36]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a06      	ldr	r2, [pc, #24]	; (8003244 <HAL_RCC_OscConfig+0x298>)
 800322c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01c      	beq.n	8003274 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7fd ffc7 	bl	80011cc <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003240:	e011      	b.n	8003266 <HAL_RCC_OscConfig+0x2ba>
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	080073c8 	.word	0x080073c8
 800324c:	20000000 	.word	0x20000000
 8003250:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003254:	f7fd ffba 	bl	80011cc <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e280      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003266:	4baf      	ldr	r3, [pc, #700]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x2a8>
 8003272:	e014      	b.n	800329e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd ffaa 	bl	80011cc <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fd ffa6 	bl	80011cc <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e26c      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800328e:	4ba5      	ldr	r3, [pc, #660]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x2d0>
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d060      	beq.n	800336c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_OscConfig+0x310>
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d119      	bne.n	80032ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d116      	bne.n	80032ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032bc:	4b99      	ldr	r3, [pc, #612]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_OscConfig+0x328>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e249      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	4b93      	ldr	r3, [pc, #588]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	4990      	ldr	r1, [pc, #576]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e8:	e040      	b.n	800336c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d023      	beq.n	800333a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f2:	4b8c      	ldr	r3, [pc, #560]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a8b      	ldr	r2, [pc, #556]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fd ff65 	bl	80011cc <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003306:	f7fd ff61 	bl	80011cc <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e227      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003318:	4b82      	ldr	r3, [pc, #520]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	4b7f      	ldr	r3, [pc, #508]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	061b      	lsls	r3, r3, #24
 8003332:	497c      	ldr	r1, [pc, #496]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
 8003338:	e018      	b.n	800336c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333a:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a79      	ldr	r2, [pc, #484]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fd ff41 	bl	80011cc <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334e:	f7fd ff3d 	bl	80011cc <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e203      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003360:	4b70      	ldr	r3, [pc, #448]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d03c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01c      	beq.n	80033ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003380:	4b68      	ldr	r3, [pc, #416]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003386:	4a67      	ldr	r2, [pc, #412]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fd ff1c 	bl	80011cc <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003398:	f7fd ff18 	bl	80011cc <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e1de      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033aa:	4b5e      	ldr	r3, [pc, #376]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80033ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ef      	beq.n	8003398 <HAL_RCC_OscConfig+0x3ec>
 80033b8:	e01b      	b.n	80033f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ba:	4b5a      	ldr	r3, [pc, #360]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80033bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c0:	4a58      	ldr	r2, [pc, #352]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fd feff 	bl	80011cc <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d2:	f7fd fefb 	bl	80011cc <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e1c1      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e4:	4b4f      	ldr	r3, [pc, #316]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80033e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1ef      	bne.n	80033d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80a6 	beq.w	800354c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003400:	2300      	movs	r3, #0
 8003402:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003404:	4b47      	ldr	r3, [pc, #284]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10d      	bne.n	800342c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003410:	4b44      	ldr	r3, [pc, #272]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	4a43      	ldr	r2, [pc, #268]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341a:	6593      	str	r3, [r2, #88]	; 0x58
 800341c:	4b41      	ldr	r3, [pc, #260]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003428:	2301      	movs	r3, #1
 800342a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342c:	4b3e      	ldr	r3, [pc, #248]	; (8003528 <HAL_RCC_OscConfig+0x57c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d118      	bne.n	800346a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003438:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <HAL_RCC_OscConfig+0x57c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a3a      	ldr	r2, [pc, #232]	; (8003528 <HAL_RCC_OscConfig+0x57c>)
 800343e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003442:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003444:	f7fd fec2 	bl	80011cc <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344c:	f7fd febe 	bl	80011cc <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e184      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800345e:	4b32      	ldr	r3, [pc, #200]	; (8003528 <HAL_RCC_OscConfig+0x57c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d108      	bne.n	8003484 <HAL_RCC_OscConfig+0x4d8>
 8003472:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003478:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003482:	e024      	b.n	80034ce <HAL_RCC_OscConfig+0x522>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b05      	cmp	r3, #5
 800348a:	d110      	bne.n	80034ae <HAL_RCC_OscConfig+0x502>
 800348c:	4b25      	ldr	r3, [pc, #148]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	4a24      	ldr	r2, [pc, #144]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 8003494:	f043 0304 	orr.w	r3, r3, #4
 8003498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	4a20      	ldr	r2, [pc, #128]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ac:	e00f      	b.n	80034ce <HAL_RCC_OscConfig+0x522>
 80034ae:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	4a1b      	ldr	r2, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034be:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	4a17      	ldr	r2, [pc, #92]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80034c6:	f023 0304 	bic.w	r3, r3, #4
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d6:	f7fd fe79 	bl	80011cc <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fd fe75 	bl	80011cc <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e139      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_OscConfig+0x578>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0ed      	beq.n	80034de <HAL_RCC_OscConfig+0x532>
 8003502:	e01a      	b.n	800353a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fd fe62 	bl	80011cc <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800350a:	e00f      	b.n	800352c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fd fe5e 	bl	80011cc <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d906      	bls.n	800352c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e122      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
 8003528:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800352c:	4b90      	ldr	r3, [pc, #576]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e8      	bne.n	800350c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353a:	7ffb      	ldrb	r3, [r7, #31]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d105      	bne.n	800354c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003540:	4b8b      	ldr	r3, [pc, #556]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	4a8a      	ldr	r2, [pc, #552]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 8108 	beq.w	8003766 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	2b02      	cmp	r3, #2
 800355c:	f040 80d0 	bne.w	8003700 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003560:	4b83      	ldr	r3, [pc, #524]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	429a      	cmp	r2, r3
 8003572:	d130      	bne.n	80035d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	3b01      	subs	r3, #1
 8003580:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d127      	bne.n	80035d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003590:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d11f      	bne.n	80035d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035a0:	2a07      	cmp	r2, #7
 80035a2:	bf14      	ite	ne
 80035a4:	2201      	movne	r2, #1
 80035a6:	2200      	moveq	r2, #0
 80035a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d113      	bne.n	80035d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	3b01      	subs	r3, #1
 80035bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d109      	bne.n	80035d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	3b01      	subs	r3, #1
 80035d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d06e      	beq.n	80036b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b0c      	cmp	r3, #12
 80035da:	d069      	beq.n	80036b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035dc:	4b64      	ldr	r3, [pc, #400]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d105      	bne.n	80035f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035e8:	4b61      	ldr	r3, [pc, #388]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0b7      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035f8:	4b5d      	ldr	r3, [pc, #372]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a5c      	ldr	r2, [pc, #368]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 80035fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003602:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003604:	f7fd fde2 	bl	80011cc <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd fdde 	bl	80011cc <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0a4      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361e:	4b54      	ldr	r3, [pc, #336]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800362a:	4b51      	ldr	r3, [pc, #324]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	4b51      	ldr	r3, [pc, #324]	; (8003774 <HAL_RCC_OscConfig+0x7c8>)
 8003630:	4013      	ands	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800363a:	3a01      	subs	r2, #1
 800363c:	0112      	lsls	r2, r2, #4
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003644:	0212      	lsls	r2, r2, #8
 8003646:	4311      	orrs	r1, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800364c:	0852      	lsrs	r2, r2, #1
 800364e:	3a01      	subs	r2, #1
 8003650:	0552      	lsls	r2, r2, #21
 8003652:	4311      	orrs	r1, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003658:	0852      	lsrs	r2, r2, #1
 800365a:	3a01      	subs	r2, #1
 800365c:	0652      	lsls	r2, r2, #25
 800365e:	4311      	orrs	r1, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003664:	0912      	lsrs	r2, r2, #4
 8003666:	0452      	lsls	r2, r2, #17
 8003668:	430a      	orrs	r2, r1
 800366a:	4941      	ldr	r1, [pc, #260]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003670:	4b3f      	ldr	r3, [pc, #252]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a3e      	ldr	r2, [pc, #248]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800367c:	4b3c      	ldr	r3, [pc, #240]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4a3b      	ldr	r2, [pc, #236]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003686:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003688:	f7fd fda0 	bl	80011cc <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7fd fd9c 	bl	80011cc <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e062      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a2:	4b33      	ldr	r3, [pc, #204]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ae:	e05a      	b.n	8003766 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e059      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b4:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d152      	bne.n	8003766 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036c0:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 80036c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036cc:	4b28      	ldr	r3, [pc, #160]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4a27      	ldr	r2, [pc, #156]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 80036d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036d8:	f7fd fd78 	bl	80011cc <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fd fd74 	bl	80011cc <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e03a      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f2:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x734>
 80036fe:	e032      	b.n	8003766 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	2b0c      	cmp	r3, #12
 8003704:	d02d      	beq.n	8003762 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a19      	ldr	r2, [pc, #100]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 800370c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003710:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003712:	4b17      	ldr	r3, [pc, #92]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800371e:	4b14      	ldr	r3, [pc, #80]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	4a13      	ldr	r2, [pc, #76]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003724:	f023 0303 	bic.w	r3, r3, #3
 8003728:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4a10      	ldr	r2, [pc, #64]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003730:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003738:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fd fd47 	bl	80011cc <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003742:	f7fd fd43 	bl	80011cc <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e009      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_RCC_OscConfig+0x7c4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f0      	bne.n	8003742 <HAL_RCC_OscConfig+0x796>
 8003760:	e001      	b.n	8003766 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000
 8003774:	f99d808c 	.word	0xf99d808c

08003778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0c8      	b.n	800391e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800378c:	4b66      	ldr	r3, [pc, #408]	; (8003928 <HAL_RCC_ClockConfig+0x1b0>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d910      	bls.n	80037bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCC_ClockConfig+0x1b0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 0207 	bic.w	r2, r3, #7
 80037a2:	4961      	ldr	r1, [pc, #388]	; (8003928 <HAL_RCC_ClockConfig+0x1b0>)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b5f      	ldr	r3, [pc, #380]	; (8003928 <HAL_RCC_ClockConfig+0x1b0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0b0      	b.n	800391e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d04c      	beq.n	8003862 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d0:	4b56      	ldr	r3, [pc, #344]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d121      	bne.n	8003820 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e09e      	b.n	800391e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d107      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e8:	4b50      	ldr	r3, [pc, #320]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d115      	bne.n	8003820 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e092      	b.n	800391e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d107      	bne.n	8003810 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003800:	4b4a      	ldr	r3, [pc, #296]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e086      	b.n	800391e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003810:	4b46      	ldr	r3, [pc, #280]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e07e      	b.n	800391e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003820:	4b42      	ldr	r3, [pc, #264]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 0203 	bic.w	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	493f      	ldr	r1, [pc, #252]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003832:	f7fd fccb 	bl	80011cc <HAL_GetTick>
 8003836:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003838:	e00a      	b.n	8003850 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383a:	f7fd fcc7 	bl	80011cc <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f241 3288 	movw	r2, #5000	; 0x1388
 8003848:	4293      	cmp	r3, r2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e066      	b.n	800391e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003850:	4b36      	ldr	r3, [pc, #216]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 020c 	and.w	r2, r3, #12
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	429a      	cmp	r2, r3
 8003860:	d1eb      	bne.n	800383a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d008      	beq.n	8003880 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800386e:	4b2f      	ldr	r3, [pc, #188]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	492c      	ldr	r1, [pc, #176]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003880:	4b29      	ldr	r3, [pc, #164]	; (8003928 <HAL_RCC_ClockConfig+0x1b0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d210      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b26      	ldr	r3, [pc, #152]	; (8003928 <HAL_RCC_ClockConfig+0x1b0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 0207 	bic.w	r2, r3, #7
 8003896:	4924      	ldr	r1, [pc, #144]	; (8003928 <HAL_RCC_ClockConfig+0x1b0>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b22      	ldr	r3, [pc, #136]	; (8003928 <HAL_RCC_ClockConfig+0x1b0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e036      	b.n	800391e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038bc:	4b1b      	ldr	r3, [pc, #108]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4918      	ldr	r1, [pc, #96]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4910      	ldr	r1, [pc, #64]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ee:	f000 f825 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80038f2:	4602      	mov	r2, r0
 80038f4:	4b0d      	ldr	r3, [pc, #52]	; (800392c <HAL_RCC_ClockConfig+0x1b4>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	490c      	ldr	r1, [pc, #48]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	5ccb      	ldrb	r3, [r1, r3]
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	fa22 f303 	lsr.w	r3, r2, r3
 800390a:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800390e:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <HAL_RCC_ClockConfig+0x1c0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fb54 	bl	8000fc0 <HAL_InitTick>
 8003918:	4603      	mov	r3, r0
 800391a:	72fb      	strb	r3, [r7, #11]

  return status;
 800391c:	7afb      	ldrb	r3, [r7, #11]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40022000 	.word	0x40022000
 800392c:	40021000 	.word	0x40021000
 8003930:	080073c8 	.word	0x080073c8
 8003934:	20000000 	.word	0x20000000
 8003938:	20000004 	.word	0x20000004

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	; 0x24
 8003940:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394a:	4b3e      	ldr	r3, [pc, #248]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003954:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x34>
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d121      	bne.n	80039ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d11e      	bne.n	80039ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003970:	4b34      	ldr	r3, [pc, #208]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d107      	bne.n	800398c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800397c:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800397e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e005      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800398c:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003998:	4a2b      	ldr	r2, [pc, #172]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x10c>)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10d      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d102      	bne.n	80039ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	e004      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039c0:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x114>)
 80039c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d134      	bne.n	8003a34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d003      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d003      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0xac>
 80039e0:	e005      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039e2:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80039e4:	617b      	str	r3, [r7, #20]
      break;
 80039e6:	e005      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x114>)
 80039ea:	617b      	str	r3, [r7, #20]
      break;
 80039ec:	e002      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	617b      	str	r3, [r7, #20]
      break;
 80039f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039f4:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	3301      	adds	r3, #1
 8003a00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a02:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	fb02 f203 	mul.w	r2, r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	0e5b      	lsrs	r3, r3, #25
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	3301      	adds	r3, #1
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a34:	69bb      	ldr	r3, [r7, #24]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3724      	adds	r7, #36	; 0x24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	080073e0 	.word	0x080073e0
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	007a1200 	.word	0x007a1200

08003a54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000000 	.word	0x20000000

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a70:	f7ff fff0 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4904      	ldr	r1, [pc, #16]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000
 8003a94:	080073d8 	.word	0x080073d8

08003a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a9c:	f7ff ffda 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0adb      	lsrs	r3, r3, #11
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4904      	ldr	r1, [pc, #16]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	080073d8 	.word	0x080073d8

08003ac4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	220f      	movs	r2, #15
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ad4:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_RCC_GetClockConfig+0x5c>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0203 	and.w	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <HAL_RCC_GetClockConfig+0x5c>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_RCC_GetClockConfig+0x5c>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_RCC_GetClockConfig+0x5c>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	08db      	lsrs	r3, r3, #3
 8003afe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <HAL_RCC_GetClockConfig+0x60>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0207 	and.w	r2, r3, #7
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40022000 	.word	0x40022000

08003b28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b40:	f7ff f9d0 	bl	8002ee4 <HAL_PWREx_GetVoltageRange>
 8003b44:	6178      	str	r0, [r7, #20]
 8003b46:	e014      	b.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b48:	4b25      	ldr	r3, [pc, #148]	; (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6593      	str	r3, [r2, #88]	; 0x58
 8003b54:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b60:	f7ff f9c0 	bl	8002ee4 <HAL_PWREx_GetVoltageRange>
 8003b64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b66:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	4a1d      	ldr	r2, [pc, #116]	; (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b78:	d10b      	bne.n	8003b92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b80      	cmp	r3, #128	; 0x80
 8003b7e:	d919      	bls.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2ba0      	cmp	r3, #160	; 0xa0
 8003b84:	d902      	bls.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b86:	2302      	movs	r3, #2
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e013      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e010      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b80      	cmp	r3, #128	; 0x80
 8003b96:	d902      	bls.n	8003b9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b98:	2303      	movs	r3, #3
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	e00a      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b80      	cmp	r3, #128	; 0x80
 8003ba2:	d102      	bne.n	8003baa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	e004      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b70      	cmp	r3, #112	; 0x70
 8003bae:	d101      	bne.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 0207 	bic.w	r2, r3, #7
 8003bbc:	4909      	ldr	r1, [pc, #36]	; (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40022000 	.word	0x40022000

08003be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d041      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c0c:	d02a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c12:	d824      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c18:	d008      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c1e:	d81e      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c28:	d010      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c2a:	e018      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c2c:	4b86      	ldr	r3, [pc, #536]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a85      	ldr	r2, [pc, #532]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c38:	e015      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fabb 	bl	80041bc <RCCEx_PLLSAI1_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c4a:	e00c      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3320      	adds	r3, #32
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fba6 	bl	80043a4 <RCCEx_PLLSAI2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c5c:	e003      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	74fb      	strb	r3, [r7, #19]
      break;
 8003c62:	e000      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c66:	7cfb      	ldrb	r3, [r7, #19]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c6c:	4b76      	ldr	r3, [pc, #472]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7a:	4973      	ldr	r1, [pc, #460]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c82:	e001      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d041      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c9c:	d02a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ca2:	d824      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ca8:	d008      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cae:	d81e      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cb8:	d010      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cba:	e018      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cbc:	4b62      	ldr	r3, [pc, #392]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a61      	ldr	r2, [pc, #388]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fa73 	bl	80041bc <RCCEx_PLLSAI1_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cda:	e00c      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3320      	adds	r3, #32
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fb5e 	bl	80043a4 <RCCEx_PLLSAI2_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cec:	e003      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf6:	7cfb      	ldrb	r3, [r7, #19]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cfc:	4b52      	ldr	r3, [pc, #328]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0a:	494f      	ldr	r1, [pc, #316]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d12:	e001      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80a0 	beq.w	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d26:	2300      	movs	r3, #0
 8003d28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d2a:	4b47      	ldr	r3, [pc, #284]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00d      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d40:	4b41      	ldr	r3, [pc, #260]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	4a40      	ldr	r2, [pc, #256]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d4c:	4b3e      	ldr	r3, [pc, #248]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d5c:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3a      	ldr	r2, [pc, #232]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d68:	f7fd fa30 	bl	80011cc <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d6e:	e009      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d70:	f7fd fa2c 	bl	80011cc <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d902      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	74fb      	strb	r3, [r7, #19]
        break;
 8003d82:	e005      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d84:	4b31      	ldr	r3, [pc, #196]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ef      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d15c      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d96:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01f      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d019      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003db4:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc0:	4b21      	ldr	r3, [pc, #132]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	4a20      	ldr	r2, [pc, #128]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003de0:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fd f9eb 	bl	80011cc <HAL_GetTick>
 8003df6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df8:	e00b      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fd f9e7 	bl	80011cc <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d902      	bls.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e10:	e006      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ec      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e26:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e36:	4904      	ldr	r1, [pc, #16]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e3e:	e009      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	74bb      	strb	r3, [r7, #18]
 8003e44:	e006      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e54:	7c7b      	ldrb	r3, [r7, #17]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5a:	4b9e      	ldr	r3, [pc, #632]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	4a9d      	ldr	r2, [pc, #628]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e72:	4b98      	ldr	r3, [pc, #608]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f023 0203 	bic.w	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	4994      	ldr	r1, [pc, #592]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e94:	4b8f      	ldr	r3, [pc, #572]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	f023 020c 	bic.w	r2, r3, #12
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	498c      	ldr	r1, [pc, #560]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eb6:	4b87      	ldr	r3, [pc, #540]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	4983      	ldr	r1, [pc, #524]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ed8:	4b7e      	ldr	r3, [pc, #504]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	497b      	ldr	r1, [pc, #492]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003efa:	4b76      	ldr	r3, [pc, #472]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f08:	4972      	ldr	r1, [pc, #456]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f1c:	4b6d      	ldr	r3, [pc, #436]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2a:	496a      	ldr	r1, [pc, #424]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f3e:	4b65      	ldr	r3, [pc, #404]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	4961      	ldr	r1, [pc, #388]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f60:	4b5c      	ldr	r3, [pc, #368]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6e:	4959      	ldr	r1, [pc, #356]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f82:	4b54      	ldr	r3, [pc, #336]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f90:	4950      	ldr	r1, [pc, #320]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fa4:	4b4b      	ldr	r3, [pc, #300]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	4948      	ldr	r1, [pc, #288]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fc6:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	493f      	ldr	r1, [pc, #252]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d028      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fe8:	4b3a      	ldr	r3, [pc, #232]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff6:	4937      	ldr	r1, [pc, #220]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004006:	d106      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004008:	4b32      	ldr	r3, [pc, #200]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a31      	ldr	r2, [pc, #196]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004012:	60d3      	str	r3, [r2, #12]
 8004014:	e011      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800401e:	d10c      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f8c8 	bl	80041bc <RCCEx_PLLSAI1_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d028      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004046:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	491f      	ldr	r1, [pc, #124]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004064:	d106      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004066:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004070:	60d3      	str	r3, [r2, #12]
 8004072:	e011      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800407c:	d10c      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	2101      	movs	r1, #1
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f899 	bl	80041bc <RCCEx_PLLSAI1_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d02b      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b2:	4908      	ldr	r1, [pc, #32]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c2:	d109      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4a02      	ldr	r2, [pc, #8]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ce:	60d3      	str	r3, [r2, #12]
 80040d0:	e014      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040e0:	d10c      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2101      	movs	r1, #1
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 f867 	bl	80041bc <RCCEx_PLLSAI1_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d02f      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004108:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004116:	4928      	ldr	r1, [pc, #160]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004126:	d10d      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	2102      	movs	r1, #2
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f844 	bl	80041bc <RCCEx_PLLSAI1_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d014      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	74bb      	strb	r3, [r7, #18]
 8004142:	e011      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800414c:	d10c      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3320      	adds	r3, #32
 8004152:	2102      	movs	r1, #2
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f925 	bl	80043a4 <RCCEx_PLLSAI2_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800415e:	7cfb      	ldrb	r3, [r7, #19]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004174:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004182:	490d      	ldr	r1, [pc, #52]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a6:	4904      	ldr	r1, [pc, #16]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40021000 	.word	0x40021000

080041bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041ca:	4b75      	ldr	r3, [pc, #468]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d018      	beq.n	8004208 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041d6:	4b72      	ldr	r3, [pc, #456]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0203 	and.w	r2, r3, #3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d10d      	bne.n	8004202 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
       ||
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041ee:	4b6c      	ldr	r3, [pc, #432]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
       ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d047      	beq.n	8004292 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	e044      	b.n	8004292 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b03      	cmp	r3, #3
 800420e:	d018      	beq.n	8004242 <RCCEx_PLLSAI1_Config+0x86>
 8004210:	2b03      	cmp	r3, #3
 8004212:	d825      	bhi.n	8004260 <RCCEx_PLLSAI1_Config+0xa4>
 8004214:	2b01      	cmp	r3, #1
 8004216:	d002      	beq.n	800421e <RCCEx_PLLSAI1_Config+0x62>
 8004218:	2b02      	cmp	r3, #2
 800421a:	d009      	beq.n	8004230 <RCCEx_PLLSAI1_Config+0x74>
 800421c:	e020      	b.n	8004260 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800421e:	4b60      	ldr	r3, [pc, #384]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d11d      	bne.n	8004266 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422e:	e01a      	b.n	8004266 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004230:	4b5b      	ldr	r3, [pc, #364]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d116      	bne.n	800426a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004240:	e013      	b.n	800426a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004242:	4b57      	ldr	r3, [pc, #348]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10f      	bne.n	800426e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800424e:	4b54      	ldr	r3, [pc, #336]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800425e:	e006      	b.n	800426e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      break;
 8004264:	e004      	b.n	8004270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004266:	bf00      	nop
 8004268:	e002      	b.n	8004270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800426a:	bf00      	nop
 800426c:	e000      	b.n	8004270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800426e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10d      	bne.n	8004292 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004276:	4b4a      	ldr	r3, [pc, #296]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6819      	ldr	r1, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	3b01      	subs	r3, #1
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	430b      	orrs	r3, r1
 800428c:	4944      	ldr	r1, [pc, #272]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d17d      	bne.n	8004394 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004298:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a40      	ldr	r2, [pc, #256]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800429e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a4:	f7fc ff92 	bl	80011cc <HAL_GetTick>
 80042a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042aa:	e009      	b.n	80042c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042ac:	f7fc ff8e 	bl	80011cc <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d902      	bls.n	80042c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	73fb      	strb	r3, [r7, #15]
        break;
 80042be:	e005      	b.n	80042cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042c0:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1ef      	bne.n	80042ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d160      	bne.n	8004394 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d111      	bne.n	80042fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042d8:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6892      	ldr	r2, [r2, #8]
 80042e8:	0211      	lsls	r1, r2, #8
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68d2      	ldr	r2, [r2, #12]
 80042ee:	0912      	lsrs	r2, r2, #4
 80042f0:	0452      	lsls	r2, r2, #17
 80042f2:	430a      	orrs	r2, r1
 80042f4:	492a      	ldr	r1, [pc, #168]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	610b      	str	r3, [r1, #16]
 80042fa:	e027      	b.n	800434c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d112      	bne.n	8004328 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004302:	4b27      	ldr	r3, [pc, #156]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800430a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6892      	ldr	r2, [r2, #8]
 8004312:	0211      	lsls	r1, r2, #8
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6912      	ldr	r2, [r2, #16]
 8004318:	0852      	lsrs	r2, r2, #1
 800431a:	3a01      	subs	r2, #1
 800431c:	0552      	lsls	r2, r2, #21
 800431e:	430a      	orrs	r2, r1
 8004320:	491f      	ldr	r1, [pc, #124]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	610b      	str	r3, [r1, #16]
 8004326:	e011      	b.n	800434c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004330:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6892      	ldr	r2, [r2, #8]
 8004338:	0211      	lsls	r1, r2, #8
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6952      	ldr	r2, [r2, #20]
 800433e:	0852      	lsrs	r2, r2, #1
 8004340:	3a01      	subs	r2, #1
 8004342:	0652      	lsls	r2, r2, #25
 8004344:	430a      	orrs	r2, r1
 8004346:	4916      	ldr	r1, [pc, #88]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004348:	4313      	orrs	r3, r2
 800434a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800434c:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a13      	ldr	r2, [pc, #76]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004352:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004356:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fc ff38 	bl	80011cc <HAL_GetTick>
 800435c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800435e:	e009      	b.n	8004374 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004360:	f7fc ff34 	bl	80011cc <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d902      	bls.n	8004374 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	73fb      	strb	r3, [r7, #15]
          break;
 8004372:	e005      	b.n	8004380 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004374:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0ef      	beq.n	8004360 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	4904      	ldr	r1, [pc, #16]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004390:	4313      	orrs	r3, r2
 8004392:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000

080043a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043b2:	4b6a      	ldr	r3, [pc, #424]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d018      	beq.n	80043f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043be:	4b67      	ldr	r3, [pc, #412]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f003 0203 	and.w	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d10d      	bne.n	80043ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
       ||
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043d6:	4b61      	ldr	r3, [pc, #388]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
       ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d047      	beq.n	800447a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
 80043ee:	e044      	b.n	800447a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d018      	beq.n	800442a <RCCEx_PLLSAI2_Config+0x86>
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d825      	bhi.n	8004448 <RCCEx_PLLSAI2_Config+0xa4>
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d002      	beq.n	8004406 <RCCEx_PLLSAI2_Config+0x62>
 8004400:	2b02      	cmp	r3, #2
 8004402:	d009      	beq.n	8004418 <RCCEx_PLLSAI2_Config+0x74>
 8004404:	e020      	b.n	8004448 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004406:	4b55      	ldr	r3, [pc, #340]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11d      	bne.n	800444e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004416:	e01a      	b.n	800444e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004418:	4b50      	ldr	r3, [pc, #320]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d116      	bne.n	8004452 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004428:	e013      	b.n	8004452 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800442a:	4b4c      	ldr	r3, [pc, #304]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004436:	4b49      	ldr	r3, [pc, #292]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004446:	e006      	b.n	8004456 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
      break;
 800444c:	e004      	b.n	8004458 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800444e:	bf00      	nop
 8004450:	e002      	b.n	8004458 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004456:	bf00      	nop
    }

    if(status == HAL_OK)
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10d      	bne.n	800447a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800445e:	4b3f      	ldr	r3, [pc, #252]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6819      	ldr	r1, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	3b01      	subs	r3, #1
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	430b      	orrs	r3, r1
 8004474:	4939      	ldr	r1, [pc, #228]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004476:	4313      	orrs	r3, r2
 8004478:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d167      	bne.n	8004550 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004480:	4b36      	ldr	r3, [pc, #216]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a35      	ldr	r2, [pc, #212]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800448a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448c:	f7fc fe9e 	bl	80011cc <HAL_GetTick>
 8004490:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004492:	e009      	b.n	80044a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004494:	f7fc fe9a 	bl	80011cc <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d902      	bls.n	80044a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	73fb      	strb	r3, [r7, #15]
        break;
 80044a6:	e005      	b.n	80044b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044a8:	4b2c      	ldr	r3, [pc, #176]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1ef      	bne.n	8004494 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d14a      	bne.n	8004550 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d111      	bne.n	80044e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044c0:	4b26      	ldr	r3, [pc, #152]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6892      	ldr	r2, [r2, #8]
 80044d0:	0211      	lsls	r1, r2, #8
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68d2      	ldr	r2, [r2, #12]
 80044d6:	0912      	lsrs	r2, r2, #4
 80044d8:	0452      	lsls	r2, r2, #17
 80044da:	430a      	orrs	r2, r1
 80044dc:	491f      	ldr	r1, [pc, #124]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	614b      	str	r3, [r1, #20]
 80044e2:	e011      	b.n	8004508 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044e4:	4b1d      	ldr	r3, [pc, #116]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6892      	ldr	r2, [r2, #8]
 80044f4:	0211      	lsls	r1, r2, #8
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6912      	ldr	r2, [r2, #16]
 80044fa:	0852      	lsrs	r2, r2, #1
 80044fc:	3a01      	subs	r2, #1
 80044fe:	0652      	lsls	r2, r2, #25
 8004500:	430a      	orrs	r2, r1
 8004502:	4916      	ldr	r1, [pc, #88]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004508:	4b14      	ldr	r3, [pc, #80]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a13      	ldr	r2, [pc, #76]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 800450e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004512:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fc fe5a 	bl	80011cc <HAL_GetTick>
 8004518:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800451a:	e009      	b.n	8004530 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800451c:	f7fc fe56 	bl	80011cc <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d902      	bls.n	8004530 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	73fb      	strb	r3, [r7, #15]
          break;
 800452e:	e005      	b.n	800453c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ef      	beq.n	800451c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	4904      	ldr	r1, [pc, #16]	; (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000

08004560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e049      	b.n	8004606 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f841 	bl	800460e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f000 fc66 	bl	8004e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	d001      	beq.n	800463c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e04f      	b.n	80046dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a23      	ldr	r2, [pc, #140]	; (80046e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d01d      	beq.n	800469a <HAL_TIM_Base_Start_IT+0x76>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004666:	d018      	beq.n	800469a <HAL_TIM_Base_Start_IT+0x76>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1f      	ldr	r2, [pc, #124]	; (80046ec <HAL_TIM_Base_Start_IT+0xc8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <HAL_TIM_Base_Start_IT+0x76>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1e      	ldr	r2, [pc, #120]	; (80046f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00e      	beq.n	800469a <HAL_TIM_Base_Start_IT+0x76>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d009      	beq.n	800469a <HAL_TIM_Base_Start_IT+0x76>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a1b      	ldr	r2, [pc, #108]	; (80046f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_TIM_Base_Start_IT+0x76>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a19      	ldr	r2, [pc, #100]	; (80046fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d115      	bne.n	80046c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	4b17      	ldr	r3, [pc, #92]	; (8004700 <HAL_TIM_Base_Start_IT+0xdc>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b06      	cmp	r3, #6
 80046aa:	d015      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0xb4>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b2:	d011      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c4:	e008      	b.n	80046d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0201 	orr.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	e000      	b.n	80046da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800
 80046f4:	40000c00 	.word	0x40000c00
 80046f8:	40013400 	.word	0x40013400
 80046fc:	40014000 	.word	0x40014000
 8004700:	00010007 	.word	0x00010007

08004704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e049      	b.n	80047aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fc fb7a 	bl	8000e24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f000 fb94 	bl	8004e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <HAL_TIM_PWM_Start+0x24>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e03c      	b.n	8004852 <HAL_TIM_PWM_Start+0x9e>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d109      	bne.n	80047f2 <HAL_TIM_PWM_Start+0x3e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	bf14      	ite	ne
 80047ea:	2301      	movne	r3, #1
 80047ec:	2300      	moveq	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	e02f      	b.n	8004852 <HAL_TIM_PWM_Start+0x9e>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d109      	bne.n	800480c <HAL_TIM_PWM_Start+0x58>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	bf14      	ite	ne
 8004804:	2301      	movne	r3, #1
 8004806:	2300      	moveq	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e022      	b.n	8004852 <HAL_TIM_PWM_Start+0x9e>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b0c      	cmp	r3, #12
 8004810:	d109      	bne.n	8004826 <HAL_TIM_PWM_Start+0x72>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b01      	cmp	r3, #1
 800481c:	bf14      	ite	ne
 800481e:	2301      	movne	r3, #1
 8004820:	2300      	moveq	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	e015      	b.n	8004852 <HAL_TIM_PWM_Start+0x9e>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b10      	cmp	r3, #16
 800482a:	d109      	bne.n	8004840 <HAL_TIM_PWM_Start+0x8c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	bf14      	ite	ne
 8004838:	2301      	movne	r3, #1
 800483a:	2300      	moveq	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	e008      	b.n	8004852 <HAL_TIM_PWM_Start+0x9e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e09c      	b.n	8004994 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d104      	bne.n	800486a <HAL_TIM_PWM_Start+0xb6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004868:	e023      	b.n	80048b2 <HAL_TIM_PWM_Start+0xfe>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b04      	cmp	r3, #4
 800486e:	d104      	bne.n	800487a <HAL_TIM_PWM_Start+0xc6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004878:	e01b      	b.n	80048b2 <HAL_TIM_PWM_Start+0xfe>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d104      	bne.n	800488a <HAL_TIM_PWM_Start+0xd6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004888:	e013      	b.n	80048b2 <HAL_TIM_PWM_Start+0xfe>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b0c      	cmp	r3, #12
 800488e:	d104      	bne.n	800489a <HAL_TIM_PWM_Start+0xe6>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004898:	e00b      	b.n	80048b2 <HAL_TIM_PWM_Start+0xfe>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b10      	cmp	r3, #16
 800489e:	d104      	bne.n	80048aa <HAL_TIM_PWM_Start+0xf6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a8:	e003      	b.n	80048b2 <HAL_TIM_PWM_Start+0xfe>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2201      	movs	r2, #1
 80048b8:	6839      	ldr	r1, [r7, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fe48 	bl	8005550 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a35      	ldr	r2, [pc, #212]	; (800499c <HAL_TIM_PWM_Start+0x1e8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <HAL_TIM_PWM_Start+0x13e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a34      	ldr	r2, [pc, #208]	; (80049a0 <HAL_TIM_PWM_Start+0x1ec>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00e      	beq.n	80048f2 <HAL_TIM_PWM_Start+0x13e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a32      	ldr	r2, [pc, #200]	; (80049a4 <HAL_TIM_PWM_Start+0x1f0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d009      	beq.n	80048f2 <HAL_TIM_PWM_Start+0x13e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a31      	ldr	r2, [pc, #196]	; (80049a8 <HAL_TIM_PWM_Start+0x1f4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_TIM_PWM_Start+0x13e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a2f      	ldr	r2, [pc, #188]	; (80049ac <HAL_TIM_PWM_Start+0x1f8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_PWM_Start+0x142>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <HAL_TIM_PWM_Start+0x144>
 80048f6:	2300      	movs	r3, #0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800490a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a22      	ldr	r2, [pc, #136]	; (800499c <HAL_TIM_PWM_Start+0x1e8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01d      	beq.n	8004952 <HAL_TIM_PWM_Start+0x19e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491e:	d018      	beq.n	8004952 <HAL_TIM_PWM_Start+0x19e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <HAL_TIM_PWM_Start+0x1fc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_TIM_PWM_Start+0x19e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a21      	ldr	r2, [pc, #132]	; (80049b4 <HAL_TIM_PWM_Start+0x200>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_TIM_PWM_Start+0x19e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1f      	ldr	r2, [pc, #124]	; (80049b8 <HAL_TIM_PWM_Start+0x204>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_TIM_PWM_Start+0x19e>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <HAL_TIM_PWM_Start+0x1ec>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_TIM_PWM_Start+0x19e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <HAL_TIM_PWM_Start+0x1f0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d115      	bne.n	800497e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	4b18      	ldr	r3, [pc, #96]	; (80049bc <HAL_TIM_PWM_Start+0x208>)
 800495a:	4013      	ands	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b06      	cmp	r3, #6
 8004962:	d015      	beq.n	8004990 <HAL_TIM_PWM_Start+0x1dc>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496a:	d011      	beq.n	8004990 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497c:	e008      	b.n	8004990 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e000      	b.n	8004992 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004990:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	40013400 	.word	0x40013400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40014400 	.word	0x40014400
 80049ac:	40014800 	.word	0x40014800
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	00010007 	.word	0x00010007

080049c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d122      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d11b      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0202 	mvn.w	r2, #2
 80049ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fa16 	bl	8004e34 <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa08 	bl	8004e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fa19 	bl	8004e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d122      	bne.n	8004a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d11b      	bne.n	8004a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0204 	mvn.w	r2, #4
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f9ec 	bl	8004e34 <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e005      	b.n	8004a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9de 	bl	8004e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f9ef 	bl	8004e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d122      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d11b      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0208 	mvn.w	r2, #8
 8004a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2204      	movs	r2, #4
 8004a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f9c2 	bl	8004e34 <HAL_TIM_IC_CaptureCallback>
 8004ab0:	e005      	b.n	8004abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f9b4 	bl	8004e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f9c5 	bl	8004e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0310 	and.w	r3, r3, #16
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d122      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d11b      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0210 	mvn.w	r2, #16
 8004ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2208      	movs	r2, #8
 8004aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f998 	bl	8004e34 <HAL_TIM_IC_CaptureCallback>
 8004b04:	e005      	b.n	8004b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f98a 	bl	8004e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f99b 	bl	8004e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d10e      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d107      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0201 	mvn.w	r2, #1
 8004b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc f8f0 	bl	8000d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b80      	cmp	r3, #128	; 0x80
 8004b50:	d10e      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5c:	2b80      	cmp	r3, #128	; 0x80
 8004b5e:	d107      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fda8 	bl	80056c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7e:	d10e      	bne.n	8004b9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b80      	cmp	r3, #128	; 0x80
 8004b8c:	d107      	bne.n	8004b9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fd9b 	bl	80056d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d10e      	bne.n	8004bca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d107      	bne.n	8004bca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f949 	bl	8004e5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d10e      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d107      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f06f 0220 	mvn.w	r2, #32
 8004bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fd5b 	bl	80056ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e0fd      	b.n	8004e16 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b14      	cmp	r3, #20
 8004c26:	f200 80f0 	bhi.w	8004e0a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c85 	.word	0x08004c85
 8004c34:	08004e0b 	.word	0x08004e0b
 8004c38:	08004e0b 	.word	0x08004e0b
 8004c3c:	08004e0b 	.word	0x08004e0b
 8004c40:	08004cc5 	.word	0x08004cc5
 8004c44:	08004e0b 	.word	0x08004e0b
 8004c48:	08004e0b 	.word	0x08004e0b
 8004c4c:	08004e0b 	.word	0x08004e0b
 8004c50:	08004d07 	.word	0x08004d07
 8004c54:	08004e0b 	.word	0x08004e0b
 8004c58:	08004e0b 	.word	0x08004e0b
 8004c5c:	08004e0b 	.word	0x08004e0b
 8004c60:	08004d47 	.word	0x08004d47
 8004c64:	08004e0b 	.word	0x08004e0b
 8004c68:	08004e0b 	.word	0x08004e0b
 8004c6c:	08004e0b 	.word	0x08004e0b
 8004c70:	08004d89 	.word	0x08004d89
 8004c74:	08004e0b 	.word	0x08004e0b
 8004c78:	08004e0b 	.word	0x08004e0b
 8004c7c:	08004e0b 	.word	0x08004e0b
 8004c80:	08004dc9 	.word	0x08004dc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f98a 	bl	8004fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0208 	orr.w	r2, r2, #8
 8004c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0204 	bic.w	r2, r2, #4
 8004cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6999      	ldr	r1, [r3, #24]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	619a      	str	r2, [r3, #24]
      break;
 8004cc2:	e0a3      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f9fa 	bl	80050c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6999      	ldr	r1, [r3, #24]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	021a      	lsls	r2, r3, #8
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	619a      	str	r2, [r3, #24]
      break;
 8004d04:	e082      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fa63 	bl	80051d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0208 	orr.w	r2, r2, #8
 8004d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0204 	bic.w	r2, r2, #4
 8004d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69d9      	ldr	r1, [r3, #28]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	61da      	str	r2, [r3, #28]
      break;
 8004d44:	e062      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 facb 	bl	80052e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69d9      	ldr	r1, [r3, #28]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	021a      	lsls	r2, r3, #8
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	61da      	str	r2, [r3, #28]
      break;
 8004d86:	e041      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fb14 	bl	80053bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0208 	orr.w	r2, r2, #8
 8004da2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0204 	bic.w	r2, r2, #4
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dc6:	e021      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fb58 	bl	8005484 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	021a      	lsls	r2, r3, #8
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e08:	e000      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004e0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop

08004e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a40      	ldr	r2, [pc, #256]	; (8004f84 <TIM_Base_SetConfig+0x114>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8e:	d00f      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a3d      	ldr	r2, [pc, #244]	; (8004f88 <TIM_Base_SetConfig+0x118>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00b      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a3c      	ldr	r2, [pc, #240]	; (8004f8c <TIM_Base_SetConfig+0x11c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a3b      	ldr	r2, [pc, #236]	; (8004f90 <TIM_Base_SetConfig+0x120>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a3a      	ldr	r2, [pc, #232]	; (8004f94 <TIM_Base_SetConfig+0x124>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d108      	bne.n	8004ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2f      	ldr	r2, [pc, #188]	; (8004f84 <TIM_Base_SetConfig+0x114>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01f      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed0:	d01b      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a2c      	ldr	r2, [pc, #176]	; (8004f88 <TIM_Base_SetConfig+0x118>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d017      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2b      	ldr	r2, [pc, #172]	; (8004f8c <TIM_Base_SetConfig+0x11c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2a      	ldr	r2, [pc, #168]	; (8004f90 <TIM_Base_SetConfig+0x120>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00f      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a29      	ldr	r2, [pc, #164]	; (8004f94 <TIM_Base_SetConfig+0x124>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00b      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a28      	ldr	r2, [pc, #160]	; (8004f98 <TIM_Base_SetConfig+0x128>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d007      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a27      	ldr	r2, [pc, #156]	; (8004f9c <TIM_Base_SetConfig+0x12c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a26      	ldr	r2, [pc, #152]	; (8004fa0 <TIM_Base_SetConfig+0x130>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d108      	bne.n	8004f1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a10      	ldr	r2, [pc, #64]	; (8004f84 <TIM_Base_SetConfig+0x114>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00f      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a12      	ldr	r2, [pc, #72]	; (8004f94 <TIM_Base_SetConfig+0x124>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00b      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a11      	ldr	r2, [pc, #68]	; (8004f98 <TIM_Base_SetConfig+0x128>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d007      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a10      	ldr	r2, [pc, #64]	; (8004f9c <TIM_Base_SetConfig+0x12c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a0f      	ldr	r2, [pc, #60]	; (8004fa0 <TIM_Base_SetConfig+0x130>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d103      	bne.n	8004f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	615a      	str	r2, [r3, #20]
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	40000400 	.word	0x40000400
 8004f8c:	40000800 	.word	0x40000800
 8004f90:	40000c00 	.word	0x40000c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f023 0201 	bic.w	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f023 0302 	bic.w	r3, r3, #2
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a2c      	ldr	r2, [pc, #176]	; (80050b0 <TIM_OC1_SetConfig+0x10c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00f      	beq.n	8005024 <TIM_OC1_SetConfig+0x80>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a2b      	ldr	r2, [pc, #172]	; (80050b4 <TIM_OC1_SetConfig+0x110>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_OC1_SetConfig+0x80>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a2a      	ldr	r2, [pc, #168]	; (80050b8 <TIM_OC1_SetConfig+0x114>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_OC1_SetConfig+0x80>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a29      	ldr	r2, [pc, #164]	; (80050bc <TIM_OC1_SetConfig+0x118>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC1_SetConfig+0x80>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a28      	ldr	r2, [pc, #160]	; (80050c0 <TIM_OC1_SetConfig+0x11c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d10c      	bne.n	800503e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0308 	bic.w	r3, r3, #8
 800502a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f023 0304 	bic.w	r3, r3, #4
 800503c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1b      	ldr	r2, [pc, #108]	; (80050b0 <TIM_OC1_SetConfig+0x10c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00f      	beq.n	8005066 <TIM_OC1_SetConfig+0xc2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1a      	ldr	r2, [pc, #104]	; (80050b4 <TIM_OC1_SetConfig+0x110>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00b      	beq.n	8005066 <TIM_OC1_SetConfig+0xc2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a19      	ldr	r2, [pc, #100]	; (80050b8 <TIM_OC1_SetConfig+0x114>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d007      	beq.n	8005066 <TIM_OC1_SetConfig+0xc2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a18      	ldr	r2, [pc, #96]	; (80050bc <TIM_OC1_SetConfig+0x118>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_OC1_SetConfig+0xc2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <TIM_OC1_SetConfig+0x11c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d111      	bne.n	800508a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800506c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	621a      	str	r2, [r3, #32]
}
 80050a4:	bf00      	nop
 80050a6:	371c      	adds	r7, #28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	40012c00 	.word	0x40012c00
 80050b4:	40013400 	.word	0x40013400
 80050b8:	40014000 	.word	0x40014000
 80050bc:	40014400 	.word	0x40014400
 80050c0:	40014800 	.word	0x40014800

080050c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f023 0210 	bic.w	r2, r3, #16
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0320 	bic.w	r3, r3, #32
 8005112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a28      	ldr	r2, [pc, #160]	; (80051c4 <TIM_OC2_SetConfig+0x100>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_OC2_SetConfig+0x6c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <TIM_OC2_SetConfig+0x104>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10d      	bne.n	800514c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800514a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <TIM_OC2_SetConfig+0x100>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00f      	beq.n	8005174 <TIM_OC2_SetConfig+0xb0>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <TIM_OC2_SetConfig+0x104>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00b      	beq.n	8005174 <TIM_OC2_SetConfig+0xb0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <TIM_OC2_SetConfig+0x108>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d007      	beq.n	8005174 <TIM_OC2_SetConfig+0xb0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <TIM_OC2_SetConfig+0x10c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_OC2_SetConfig+0xb0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <TIM_OC2_SetConfig+0x110>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d113      	bne.n	800519c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800517a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	621a      	str	r2, [r3, #32]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	40013400 	.word	0x40013400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800

080051d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a27      	ldr	r2, [pc, #156]	; (80052d4 <TIM_OC3_SetConfig+0xfc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_OC3_SetConfig+0x6a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a26      	ldr	r2, [pc, #152]	; (80052d8 <TIM_OC3_SetConfig+0x100>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d10d      	bne.n	800525e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800525c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <TIM_OC3_SetConfig+0xfc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00f      	beq.n	8005286 <TIM_OC3_SetConfig+0xae>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a1b      	ldr	r2, [pc, #108]	; (80052d8 <TIM_OC3_SetConfig+0x100>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00b      	beq.n	8005286 <TIM_OC3_SetConfig+0xae>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1a      	ldr	r2, [pc, #104]	; (80052dc <TIM_OC3_SetConfig+0x104>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <TIM_OC3_SetConfig+0xae>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <TIM_OC3_SetConfig+0x108>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <TIM_OC3_SetConfig+0xae>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <TIM_OC3_SetConfig+0x10c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d113      	bne.n	80052ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800528c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	621a      	str	r2, [r3, #32]
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40013400 	.word	0x40013400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40014400 	.word	0x40014400
 80052e4:	40014800 	.word	0x40014800

080052e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	031b      	lsls	r3, r3, #12
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <TIM_OC4_SetConfig+0xc0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00f      	beq.n	800536c <TIM_OC4_SetConfig+0x84>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a17      	ldr	r2, [pc, #92]	; (80053ac <TIM_OC4_SetConfig+0xc4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00b      	beq.n	800536c <TIM_OC4_SetConfig+0x84>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a16      	ldr	r2, [pc, #88]	; (80053b0 <TIM_OC4_SetConfig+0xc8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d007      	beq.n	800536c <TIM_OC4_SetConfig+0x84>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a15      	ldr	r2, [pc, #84]	; (80053b4 <TIM_OC4_SetConfig+0xcc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_OC4_SetConfig+0x84>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a14      	ldr	r2, [pc, #80]	; (80053b8 <TIM_OC4_SetConfig+0xd0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d109      	bne.n	8005380 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	019b      	lsls	r3, r3, #6
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40013400 	.word	0x40013400
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40014400 	.word	0x40014400
 80053b8:	40014800 	.word	0x40014800

080053bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005400:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	041b      	lsls	r3, r3, #16
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a17      	ldr	r2, [pc, #92]	; (8005470 <TIM_OC5_SetConfig+0xb4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00f      	beq.n	8005436 <TIM_OC5_SetConfig+0x7a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a16      	ldr	r2, [pc, #88]	; (8005474 <TIM_OC5_SetConfig+0xb8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00b      	beq.n	8005436 <TIM_OC5_SetConfig+0x7a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a15      	ldr	r2, [pc, #84]	; (8005478 <TIM_OC5_SetConfig+0xbc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d007      	beq.n	8005436 <TIM_OC5_SetConfig+0x7a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a14      	ldr	r2, [pc, #80]	; (800547c <TIM_OC5_SetConfig+0xc0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <TIM_OC5_SetConfig+0x7a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a13      	ldr	r2, [pc, #76]	; (8005480 <TIM_OC5_SetConfig+0xc4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d109      	bne.n	800544a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	621a      	str	r2, [r3, #32]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	40012c00 	.word	0x40012c00
 8005474:	40013400 	.word	0x40013400
 8005478:	40014000 	.word	0x40014000
 800547c:	40014400 	.word	0x40014400
 8005480:	40014800 	.word	0x40014800

08005484 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	021b      	lsls	r3, r3, #8
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	051b      	lsls	r3, r3, #20
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a18      	ldr	r2, [pc, #96]	; (800553c <TIM_OC6_SetConfig+0xb8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00f      	beq.n	8005500 <TIM_OC6_SetConfig+0x7c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a17      	ldr	r2, [pc, #92]	; (8005540 <TIM_OC6_SetConfig+0xbc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00b      	beq.n	8005500 <TIM_OC6_SetConfig+0x7c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a16      	ldr	r2, [pc, #88]	; (8005544 <TIM_OC6_SetConfig+0xc0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_OC6_SetConfig+0x7c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a15      	ldr	r2, [pc, #84]	; (8005548 <TIM_OC6_SetConfig+0xc4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC6_SetConfig+0x7c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a14      	ldr	r2, [pc, #80]	; (800554c <TIM_OC6_SetConfig+0xc8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d109      	bne.n	8005514 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005506:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	029b      	lsls	r3, r3, #10
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	621a      	str	r2, [r3, #32]
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40013400 	.word	0x40013400
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800

08005550 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	2201      	movs	r2, #1
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	43db      	mvns	r3, r3
 8005572:	401a      	ands	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	431a      	orrs	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e068      	b.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a2e      	ldr	r2, [pc, #184]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2d      	ldr	r2, [pc, #180]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d108      	bne.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005600:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1e      	ldr	r2, [pc, #120]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01d      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005626:	d018      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1b      	ldr	r2, [pc, #108]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1a      	ldr	r2, [pc, #104]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00e      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a18      	ldr	r2, [pc, #96]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a13      	ldr	r2, [pc, #76]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a14      	ldr	r2, [pc, #80]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d10c      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4313      	orrs	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40013400 	.word	0x40013400
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40014000 	.word	0x40014000

080056ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e040      	b.n	800577c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fb fc16 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2224      	movs	r2, #36	; 0x24
 8005714:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0201 	bic.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f82c 	bl	8005784 <UART_SetConfig>
 800572c:	4603      	mov	r3, r0
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e022      	b.n	800577c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 faaa 	bl	8005c98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fb31 	bl	8005ddc <UART_CheckIdleState>
 800577a:	4603      	mov	r3, r0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005784:	b5b0      	push	{r4, r5, r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4bad      	ldr	r3, [pc, #692]	; (8005a64 <UART_SetConfig+0x2e0>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	69f9      	ldr	r1, [r7, #28]
 80057b8:	430b      	orrs	r3, r1
 80057ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4aa2      	ldr	r2, [pc, #648]	; (8005a68 <UART_SetConfig+0x2e4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a99      	ldr	r2, [pc, #612]	; (8005a6c <UART_SetConfig+0x2e8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d121      	bne.n	800584e <UART_SetConfig+0xca>
 800580a:	4b99      	ldr	r3, [pc, #612]	; (8005a70 <UART_SetConfig+0x2ec>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	2b03      	cmp	r3, #3
 8005816:	d817      	bhi.n	8005848 <UART_SetConfig+0xc4>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <UART_SetConfig+0x9c>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005831 	.word	0x08005831
 8005824:	0800583d 	.word	0x0800583d
 8005828:	08005837 	.word	0x08005837
 800582c:	08005843 	.word	0x08005843
 8005830:	2301      	movs	r3, #1
 8005832:	76fb      	strb	r3, [r7, #27]
 8005834:	e0e7      	b.n	8005a06 <UART_SetConfig+0x282>
 8005836:	2302      	movs	r3, #2
 8005838:	76fb      	strb	r3, [r7, #27]
 800583a:	e0e4      	b.n	8005a06 <UART_SetConfig+0x282>
 800583c:	2304      	movs	r3, #4
 800583e:	76fb      	strb	r3, [r7, #27]
 8005840:	e0e1      	b.n	8005a06 <UART_SetConfig+0x282>
 8005842:	2308      	movs	r3, #8
 8005844:	76fb      	strb	r3, [r7, #27]
 8005846:	e0de      	b.n	8005a06 <UART_SetConfig+0x282>
 8005848:	2310      	movs	r3, #16
 800584a:	76fb      	strb	r3, [r7, #27]
 800584c:	e0db      	b.n	8005a06 <UART_SetConfig+0x282>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a88      	ldr	r2, [pc, #544]	; (8005a74 <UART_SetConfig+0x2f0>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d132      	bne.n	80058be <UART_SetConfig+0x13a>
 8005858:	4b85      	ldr	r3, [pc, #532]	; (8005a70 <UART_SetConfig+0x2ec>)
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b0c      	cmp	r3, #12
 8005864:	d828      	bhi.n	80058b8 <UART_SetConfig+0x134>
 8005866:	a201      	add	r2, pc, #4	; (adr r2, 800586c <UART_SetConfig+0xe8>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	080058a1 	.word	0x080058a1
 8005870:	080058b9 	.word	0x080058b9
 8005874:	080058b9 	.word	0x080058b9
 8005878:	080058b9 	.word	0x080058b9
 800587c:	080058ad 	.word	0x080058ad
 8005880:	080058b9 	.word	0x080058b9
 8005884:	080058b9 	.word	0x080058b9
 8005888:	080058b9 	.word	0x080058b9
 800588c:	080058a7 	.word	0x080058a7
 8005890:	080058b9 	.word	0x080058b9
 8005894:	080058b9 	.word	0x080058b9
 8005898:	080058b9 	.word	0x080058b9
 800589c:	080058b3 	.word	0x080058b3
 80058a0:	2300      	movs	r3, #0
 80058a2:	76fb      	strb	r3, [r7, #27]
 80058a4:	e0af      	b.n	8005a06 <UART_SetConfig+0x282>
 80058a6:	2302      	movs	r3, #2
 80058a8:	76fb      	strb	r3, [r7, #27]
 80058aa:	e0ac      	b.n	8005a06 <UART_SetConfig+0x282>
 80058ac:	2304      	movs	r3, #4
 80058ae:	76fb      	strb	r3, [r7, #27]
 80058b0:	e0a9      	b.n	8005a06 <UART_SetConfig+0x282>
 80058b2:	2308      	movs	r3, #8
 80058b4:	76fb      	strb	r3, [r7, #27]
 80058b6:	e0a6      	b.n	8005a06 <UART_SetConfig+0x282>
 80058b8:	2310      	movs	r3, #16
 80058ba:	76fb      	strb	r3, [r7, #27]
 80058bc:	e0a3      	b.n	8005a06 <UART_SetConfig+0x282>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a6d      	ldr	r2, [pc, #436]	; (8005a78 <UART_SetConfig+0x2f4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d120      	bne.n	800590a <UART_SetConfig+0x186>
 80058c8:	4b69      	ldr	r3, [pc, #420]	; (8005a70 <UART_SetConfig+0x2ec>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058d2:	2b30      	cmp	r3, #48	; 0x30
 80058d4:	d013      	beq.n	80058fe <UART_SetConfig+0x17a>
 80058d6:	2b30      	cmp	r3, #48	; 0x30
 80058d8:	d814      	bhi.n	8005904 <UART_SetConfig+0x180>
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d009      	beq.n	80058f2 <UART_SetConfig+0x16e>
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d810      	bhi.n	8005904 <UART_SetConfig+0x180>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <UART_SetConfig+0x168>
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d006      	beq.n	80058f8 <UART_SetConfig+0x174>
 80058ea:	e00b      	b.n	8005904 <UART_SetConfig+0x180>
 80058ec:	2300      	movs	r3, #0
 80058ee:	76fb      	strb	r3, [r7, #27]
 80058f0:	e089      	b.n	8005a06 <UART_SetConfig+0x282>
 80058f2:	2302      	movs	r3, #2
 80058f4:	76fb      	strb	r3, [r7, #27]
 80058f6:	e086      	b.n	8005a06 <UART_SetConfig+0x282>
 80058f8:	2304      	movs	r3, #4
 80058fa:	76fb      	strb	r3, [r7, #27]
 80058fc:	e083      	b.n	8005a06 <UART_SetConfig+0x282>
 80058fe:	2308      	movs	r3, #8
 8005900:	76fb      	strb	r3, [r7, #27]
 8005902:	e080      	b.n	8005a06 <UART_SetConfig+0x282>
 8005904:	2310      	movs	r3, #16
 8005906:	76fb      	strb	r3, [r7, #27]
 8005908:	e07d      	b.n	8005a06 <UART_SetConfig+0x282>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a5b      	ldr	r2, [pc, #364]	; (8005a7c <UART_SetConfig+0x2f8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d120      	bne.n	8005956 <UART_SetConfig+0x1d2>
 8005914:	4b56      	ldr	r3, [pc, #344]	; (8005a70 <UART_SetConfig+0x2ec>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800591e:	2bc0      	cmp	r3, #192	; 0xc0
 8005920:	d013      	beq.n	800594a <UART_SetConfig+0x1c6>
 8005922:	2bc0      	cmp	r3, #192	; 0xc0
 8005924:	d814      	bhi.n	8005950 <UART_SetConfig+0x1cc>
 8005926:	2b80      	cmp	r3, #128	; 0x80
 8005928:	d009      	beq.n	800593e <UART_SetConfig+0x1ba>
 800592a:	2b80      	cmp	r3, #128	; 0x80
 800592c:	d810      	bhi.n	8005950 <UART_SetConfig+0x1cc>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <UART_SetConfig+0x1b4>
 8005932:	2b40      	cmp	r3, #64	; 0x40
 8005934:	d006      	beq.n	8005944 <UART_SetConfig+0x1c0>
 8005936:	e00b      	b.n	8005950 <UART_SetConfig+0x1cc>
 8005938:	2300      	movs	r3, #0
 800593a:	76fb      	strb	r3, [r7, #27]
 800593c:	e063      	b.n	8005a06 <UART_SetConfig+0x282>
 800593e:	2302      	movs	r3, #2
 8005940:	76fb      	strb	r3, [r7, #27]
 8005942:	e060      	b.n	8005a06 <UART_SetConfig+0x282>
 8005944:	2304      	movs	r3, #4
 8005946:	76fb      	strb	r3, [r7, #27]
 8005948:	e05d      	b.n	8005a06 <UART_SetConfig+0x282>
 800594a:	2308      	movs	r3, #8
 800594c:	76fb      	strb	r3, [r7, #27]
 800594e:	e05a      	b.n	8005a06 <UART_SetConfig+0x282>
 8005950:	2310      	movs	r3, #16
 8005952:	76fb      	strb	r3, [r7, #27]
 8005954:	e057      	b.n	8005a06 <UART_SetConfig+0x282>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a49      	ldr	r2, [pc, #292]	; (8005a80 <UART_SetConfig+0x2fc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d125      	bne.n	80059ac <UART_SetConfig+0x228>
 8005960:	4b43      	ldr	r3, [pc, #268]	; (8005a70 <UART_SetConfig+0x2ec>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800596e:	d017      	beq.n	80059a0 <UART_SetConfig+0x21c>
 8005970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005974:	d817      	bhi.n	80059a6 <UART_SetConfig+0x222>
 8005976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800597a:	d00b      	beq.n	8005994 <UART_SetConfig+0x210>
 800597c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005980:	d811      	bhi.n	80059a6 <UART_SetConfig+0x222>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <UART_SetConfig+0x20a>
 8005986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598a:	d006      	beq.n	800599a <UART_SetConfig+0x216>
 800598c:	e00b      	b.n	80059a6 <UART_SetConfig+0x222>
 800598e:	2300      	movs	r3, #0
 8005990:	76fb      	strb	r3, [r7, #27]
 8005992:	e038      	b.n	8005a06 <UART_SetConfig+0x282>
 8005994:	2302      	movs	r3, #2
 8005996:	76fb      	strb	r3, [r7, #27]
 8005998:	e035      	b.n	8005a06 <UART_SetConfig+0x282>
 800599a:	2304      	movs	r3, #4
 800599c:	76fb      	strb	r3, [r7, #27]
 800599e:	e032      	b.n	8005a06 <UART_SetConfig+0x282>
 80059a0:	2308      	movs	r3, #8
 80059a2:	76fb      	strb	r3, [r7, #27]
 80059a4:	e02f      	b.n	8005a06 <UART_SetConfig+0x282>
 80059a6:	2310      	movs	r3, #16
 80059a8:	76fb      	strb	r3, [r7, #27]
 80059aa:	e02c      	b.n	8005a06 <UART_SetConfig+0x282>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a2d      	ldr	r2, [pc, #180]	; (8005a68 <UART_SetConfig+0x2e4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d125      	bne.n	8005a02 <UART_SetConfig+0x27e>
 80059b6:	4b2e      	ldr	r3, [pc, #184]	; (8005a70 <UART_SetConfig+0x2ec>)
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059c4:	d017      	beq.n	80059f6 <UART_SetConfig+0x272>
 80059c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059ca:	d817      	bhi.n	80059fc <UART_SetConfig+0x278>
 80059cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d0:	d00b      	beq.n	80059ea <UART_SetConfig+0x266>
 80059d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d6:	d811      	bhi.n	80059fc <UART_SetConfig+0x278>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <UART_SetConfig+0x260>
 80059dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e0:	d006      	beq.n	80059f0 <UART_SetConfig+0x26c>
 80059e2:	e00b      	b.n	80059fc <UART_SetConfig+0x278>
 80059e4:	2300      	movs	r3, #0
 80059e6:	76fb      	strb	r3, [r7, #27]
 80059e8:	e00d      	b.n	8005a06 <UART_SetConfig+0x282>
 80059ea:	2302      	movs	r3, #2
 80059ec:	76fb      	strb	r3, [r7, #27]
 80059ee:	e00a      	b.n	8005a06 <UART_SetConfig+0x282>
 80059f0:	2304      	movs	r3, #4
 80059f2:	76fb      	strb	r3, [r7, #27]
 80059f4:	e007      	b.n	8005a06 <UART_SetConfig+0x282>
 80059f6:	2308      	movs	r3, #8
 80059f8:	76fb      	strb	r3, [r7, #27]
 80059fa:	e004      	b.n	8005a06 <UART_SetConfig+0x282>
 80059fc:	2310      	movs	r3, #16
 80059fe:	76fb      	strb	r3, [r7, #27]
 8005a00:	e001      	b.n	8005a06 <UART_SetConfig+0x282>
 8005a02:	2310      	movs	r3, #16
 8005a04:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a17      	ldr	r2, [pc, #92]	; (8005a68 <UART_SetConfig+0x2e4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	f040 8087 	bne.w	8005b20 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a12:	7efb      	ldrb	r3, [r7, #27]
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d837      	bhi.n	8005a88 <UART_SetConfig+0x304>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <UART_SetConfig+0x29c>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a45 	.word	0x08005a45
 8005a24:	08005a89 	.word	0x08005a89
 8005a28:	08005a4d 	.word	0x08005a4d
 8005a2c:	08005a89 	.word	0x08005a89
 8005a30:	08005a53 	.word	0x08005a53
 8005a34:	08005a89 	.word	0x08005a89
 8005a38:	08005a89 	.word	0x08005a89
 8005a3c:	08005a89 	.word	0x08005a89
 8005a40:	08005a5b 	.word	0x08005a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a44:	f7fe f812 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8005a48:	6178      	str	r0, [r7, #20]
        break;
 8005a4a:	e022      	b.n	8005a92 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a4c:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <UART_SetConfig+0x300>)
 8005a4e:	617b      	str	r3, [r7, #20]
        break;
 8005a50:	e01f      	b.n	8005a92 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a52:	f7fd ff73 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8005a56:	6178      	str	r0, [r7, #20]
        break;
 8005a58:	e01b      	b.n	8005a92 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a5e:	617b      	str	r3, [r7, #20]
        break;
 8005a60:	e017      	b.n	8005a92 <UART_SetConfig+0x30e>
 8005a62:	bf00      	nop
 8005a64:	efff69f3 	.word	0xefff69f3
 8005a68:	40008000 	.word	0x40008000
 8005a6c:	40013800 	.word	0x40013800
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40004400 	.word	0x40004400
 8005a78:	40004800 	.word	0x40004800
 8005a7c:	40004c00 	.word	0x40004c00
 8005a80:	40005000 	.word	0x40005000
 8005a84:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	76bb      	strb	r3, [r7, #26]
        break;
 8005a90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80f1 	beq.w	8005c7c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d305      	bcc.n	8005ab6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d902      	bls.n	8005abc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	76bb      	strb	r3, [r7, #26]
 8005aba:	e0df      	b.n	8005c7c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f04f 0100 	mov.w	r1, #0
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	020b      	lsls	r3, r1, #8
 8005ace:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ad2:	0202      	lsls	r2, r0, #8
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	6849      	ldr	r1, [r1, #4]
 8005ad8:	0849      	lsrs	r1, r1, #1
 8005ada:	4608      	mov	r0, r1
 8005adc:	f04f 0100 	mov.w	r1, #0
 8005ae0:	1814      	adds	r4, r2, r0
 8005ae2:	eb43 0501 	adc.w	r5, r3, r1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	4620      	mov	r0, r4
 8005af2:	4629      	mov	r1, r5
 8005af4:	f7fa fb6c 	bl	80001d0 <__aeabi_uldivmod>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4613      	mov	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b06:	d308      	bcc.n	8005b1a <UART_SetConfig+0x396>
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b0e:	d204      	bcs.n	8005b1a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	60da      	str	r2, [r3, #12]
 8005b18:	e0b0      	b.n	8005c7c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	76bb      	strb	r3, [r7, #26]
 8005b1e:	e0ad      	b.n	8005c7c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b28:	d15c      	bne.n	8005be4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005b2a:	7efb      	ldrb	r3, [r7, #27]
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d828      	bhi.n	8005b82 <UART_SetConfig+0x3fe>
 8005b30:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <UART_SetConfig+0x3b4>)
 8005b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b36:	bf00      	nop
 8005b38:	08005b5d 	.word	0x08005b5d
 8005b3c:	08005b65 	.word	0x08005b65
 8005b40:	08005b6d 	.word	0x08005b6d
 8005b44:	08005b83 	.word	0x08005b83
 8005b48:	08005b73 	.word	0x08005b73
 8005b4c:	08005b83 	.word	0x08005b83
 8005b50:	08005b83 	.word	0x08005b83
 8005b54:	08005b83 	.word	0x08005b83
 8005b58:	08005b7b 	.word	0x08005b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b5c:	f7fd ff86 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8005b60:	6178      	str	r0, [r7, #20]
        break;
 8005b62:	e013      	b.n	8005b8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b64:	f7fd ff98 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8005b68:	6178      	str	r0, [r7, #20]
        break;
 8005b6a:	e00f      	b.n	8005b8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b6c:	4b49      	ldr	r3, [pc, #292]	; (8005c94 <UART_SetConfig+0x510>)
 8005b6e:	617b      	str	r3, [r7, #20]
        break;
 8005b70:	e00c      	b.n	8005b8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b72:	f7fd fee3 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8005b76:	6178      	str	r0, [r7, #20]
        break;
 8005b78:	e008      	b.n	8005b8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b7e:	617b      	str	r3, [r7, #20]
        break;
 8005b80:	e004      	b.n	8005b8c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	76bb      	strb	r3, [r7, #26]
        break;
 8005b8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d074      	beq.n	8005c7c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	005a      	lsls	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	441a      	add	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b0f      	cmp	r3, #15
 8005bae:	d916      	bls.n	8005bde <UART_SetConfig+0x45a>
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb6:	d212      	bcs.n	8005bde <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f023 030f 	bic.w	r3, r3, #15
 8005bc0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	085b      	lsrs	r3, r3, #1
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	89fb      	ldrh	r3, [r7, #14]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	89fa      	ldrh	r2, [r7, #14]
 8005bda:	60da      	str	r2, [r3, #12]
 8005bdc:	e04e      	b.n	8005c7c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	76bb      	strb	r3, [r7, #26]
 8005be2:	e04b      	b.n	8005c7c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005be4:	7efb      	ldrb	r3, [r7, #27]
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d827      	bhi.n	8005c3a <UART_SetConfig+0x4b6>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0x46c>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c15 	.word	0x08005c15
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005c25 	.word	0x08005c25
 8005bfc:	08005c3b 	.word	0x08005c3b
 8005c00:	08005c2b 	.word	0x08005c2b
 8005c04:	08005c3b 	.word	0x08005c3b
 8005c08:	08005c3b 	.word	0x08005c3b
 8005c0c:	08005c3b 	.word	0x08005c3b
 8005c10:	08005c33 	.word	0x08005c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fd ff2a 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8005c18:	6178      	str	r0, [r7, #20]
        break;
 8005c1a:	e013      	b.n	8005c44 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c1c:	f7fd ff3c 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8005c20:	6178      	str	r0, [r7, #20]
        break;
 8005c22:	e00f      	b.n	8005c44 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c24:	4b1b      	ldr	r3, [pc, #108]	; (8005c94 <UART_SetConfig+0x510>)
 8005c26:	617b      	str	r3, [r7, #20]
        break;
 8005c28:	e00c      	b.n	8005c44 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c2a:	f7fd fe87 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8005c2e:	6178      	str	r0, [r7, #20]
        break;
 8005c30:	e008      	b.n	8005c44 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c36:	617b      	str	r3, [r7, #20]
        break;
 8005c38:	e004      	b.n	8005c44 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	76bb      	strb	r3, [r7, #26]
        break;
 8005c42:	bf00      	nop
    }

    if (pclk != 0U)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d018      	beq.n	8005c7c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	085a      	lsrs	r2, r3, #1
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	441a      	add	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b0f      	cmp	r3, #15
 8005c64:	d908      	bls.n	8005c78 <UART_SetConfig+0x4f4>
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6c:	d204      	bcs.n	8005c78 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	60da      	str	r2, [r3, #12]
 8005c76:	e001      	b.n	8005c7c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c88:	7ebb      	ldrb	r3, [r7, #26]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bdb0      	pop	{r4, r5, r7, pc}
 8005c92:	bf00      	nop
 8005c94:	00f42400 	.word	0x00f42400

08005c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01a      	beq.n	8005dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d96:	d10a      	bne.n	8005dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	605a      	str	r2, [r3, #4]
  }
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dec:	f7fb f9ee 	bl	80011cc <HAL_GetTick>
 8005df0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0308 	and.w	r3, r3, #8
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d10e      	bne.n	8005e1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f82d 	bl	8005e6e <UART_WaitOnFlagUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e023      	b.n	8005e66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d10e      	bne.n	8005e4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f817 	bl	8005e6e <UART_WaitOnFlagUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e00d      	b.n	8005e66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7e:	e05e      	b.n	8005f3e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e86:	d05a      	beq.n	8005f3e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e88:	f7fb f9a0 	bl	80011cc <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d302      	bcc.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x30>
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11b      	bne.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005eac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e043      	b.n	8005f5e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d02c      	beq.n	8005f3e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef2:	d124      	bne.n	8005f3e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005efc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f0c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2220      	movs	r2, #32
 8005f22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e00f      	b.n	8005f5e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4013      	ands	r3, r2
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	bf0c      	ite	eq
 8005f4e:	2301      	moveq	r3, #1
 8005f50:	2300      	movne	r3, #0
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d091      	beq.n	8005e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005f6a:	f000 fa93 	bl	8006494 <vTaskStartScheduler>
  
  return osOK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <osDelay+0x16>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	e000      	b.n	8005f8c <osDelay+0x18>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fa4d 	bl	800642c <vTaskDelay>
  
  return osOK;
 8005f92:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f103 0208 	add.w	r2, r3, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f103 0208 	add.w	r2, r3, #8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f103 0208 	add.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	601a      	str	r2, [r3, #0]
}
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d103      	bne.n	800605e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e00c      	b.n	8006078 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3308      	adds	r3, #8
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e002      	b.n	800606c <vListInsert+0x2e>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	429a      	cmp	r2, r3
 8006076:	d2f6      	bcs.n	8006066 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	601a      	str	r2, [r3, #0]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6892      	ldr	r2, [r2, #8]
 80060c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6852      	ldr	r2, [r2, #4]
 80060d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d103      	bne.n	80060e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	1e5a      	subs	r2, r3, #1
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08e      	sub	sp, #56	; 0x38
 8006108:	af04      	add	r7, sp, #16
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10a      	bne.n	800612e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800612a:	bf00      	nop
 800612c:	e7fe      	b.n	800612c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <xTaskCreateStatic+0x46>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	61fb      	str	r3, [r7, #28]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800614a:	2354      	movs	r3, #84	; 0x54
 800614c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b54      	cmp	r3, #84	; 0x54
 8006152:	d00a      	beq.n	800616a <xTaskCreateStatic+0x66>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	61bb      	str	r3, [r7, #24]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800616a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01e      	beq.n	80061b0 <xTaskCreateStatic+0xac>
 8006172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01b      	beq.n	80061b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006180:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	2202      	movs	r2, #2
 8006186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800618a:	2300      	movs	r3, #0
 800618c:	9303      	str	r3, [sp, #12]
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	9302      	str	r3, [sp, #8]
 8006192:	f107 0314 	add.w	r3, r7, #20
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 f850 	bl	8006248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061aa:	f000 f8d5 	bl	8006358 <prvAddNewTaskToReadyList>
 80061ae:	e001      	b.n	80061b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061b4:	697b      	ldr	r3, [r7, #20]
	}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3728      	adds	r7, #40	; 0x28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b08c      	sub	sp, #48	; 0x30
 80061c2:	af04      	add	r7, sp, #16
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	603b      	str	r3, [r7, #0]
 80061ca:	4613      	mov	r3, r2
 80061cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fec8 	bl	8006f68 <pvPortMalloc>
 80061d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00e      	beq.n	80061fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061e0:	2054      	movs	r0, #84	; 0x54
 80061e2:	f000 fec1 	bl	8006f68 <pvPortMalloc>
 80061e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
 80061f4:	e005      	b.n	8006202 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061f6:	6978      	ldr	r0, [r7, #20]
 80061f8:	f000 ff82 	bl	8007100 <vPortFree>
 80061fc:	e001      	b.n	8006202 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d017      	beq.n	8006238 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006210:	88fa      	ldrh	r2, [r7, #6]
 8006212:	2300      	movs	r3, #0
 8006214:	9303      	str	r3, [sp, #12]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	9302      	str	r3, [sp, #8]
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f80e 	bl	8006248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800622c:	69f8      	ldr	r0, [r7, #28]
 800622e:	f000 f893 	bl	8006358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006232:	2301      	movs	r3, #1
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	e002      	b.n	800623e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006238:	f04f 33ff 	mov.w	r3, #4294967295
 800623c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800623e:	69bb      	ldr	r3, [r7, #24]
	}
 8006240:	4618      	mov	r0, r3
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006260:	3b01      	subs	r3, #1
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	f023 0307 	bic.w	r3, r3, #7
 800626e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f003 0307 	and.w	r3, r3, #7
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <prvInitialiseNewTask+0x48>
	__asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	617b      	str	r3, [r7, #20]
}
 800628c:	bf00      	nop
 800628e:	e7fe      	b.n	800628e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d01f      	beq.n	80062d6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
 800629a:	e012      	b.n	80062c2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	7819      	ldrb	r1, [r3, #0]
 80062a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	4413      	add	r3, r2
 80062aa:	3334      	adds	r3, #52	; 0x34
 80062ac:	460a      	mov	r2, r1
 80062ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d006      	beq.n	80062ca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	3301      	adds	r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	2b0f      	cmp	r3, #15
 80062c6:	d9e9      	bls.n	800629c <prvInitialiseNewTask+0x54>
 80062c8:	e000      	b.n	80062cc <prvInitialiseNewTask+0x84>
			{
				break;
 80062ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062d4:	e003      	b.n	80062de <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	2b06      	cmp	r3, #6
 80062e2:	d901      	bls.n	80062e8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062e4:	2306      	movs	r3, #6
 80062e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	2200      	movs	r2, #0
 80062f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	3304      	adds	r3, #4
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff fe6c 	bl	8005fdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	3318      	adds	r3, #24
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fe67 	bl	8005fdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006312:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	f1c3 0207 	rsb	r2, r3, #7
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006322:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	2200      	movs	r2, #0
 8006328:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	68f9      	ldr	r1, [r7, #12]
 8006336:	69b8      	ldr	r0, [r7, #24]
 8006338:	f000 fc06 	bl	8006b48 <pxPortInitialiseStack>
 800633c:	4602      	mov	r2, r0
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800634e:	bf00      	nop
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006360:	f000 fd20 	bl	8006da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006364:	4b2a      	ldr	r3, [pc, #168]	; (8006410 <prvAddNewTaskToReadyList+0xb8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	4a29      	ldr	r2, [pc, #164]	; (8006410 <prvAddNewTaskToReadyList+0xb8>)
 800636c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800636e:	4b29      	ldr	r3, [pc, #164]	; (8006414 <prvAddNewTaskToReadyList+0xbc>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d109      	bne.n	800638a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006376:	4a27      	ldr	r2, [pc, #156]	; (8006414 <prvAddNewTaskToReadyList+0xbc>)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800637c:	4b24      	ldr	r3, [pc, #144]	; (8006410 <prvAddNewTaskToReadyList+0xb8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d110      	bne.n	80063a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006384:	f000 fabc 	bl	8006900 <prvInitialiseTaskLists>
 8006388:	e00d      	b.n	80063a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800638a:	4b23      	ldr	r3, [pc, #140]	; (8006418 <prvAddNewTaskToReadyList+0xc0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006392:	4b20      	ldr	r3, [pc, #128]	; (8006414 <prvAddNewTaskToReadyList+0xbc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	429a      	cmp	r2, r3
 800639e:	d802      	bhi.n	80063a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063a0:	4a1c      	ldr	r2, [pc, #112]	; (8006414 <prvAddNewTaskToReadyList+0xbc>)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063a6:	4b1d      	ldr	r3, [pc, #116]	; (800641c <prvAddNewTaskToReadyList+0xc4>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3301      	adds	r3, #1
 80063ac:	4a1b      	ldr	r2, [pc, #108]	; (800641c <prvAddNewTaskToReadyList+0xc4>)
 80063ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	2201      	movs	r2, #1
 80063b6:	409a      	lsls	r2, r3
 80063b8:	4b19      	ldr	r3, [pc, #100]	; (8006420 <prvAddNewTaskToReadyList+0xc8>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4313      	orrs	r3, r2
 80063be:	4a18      	ldr	r2, [pc, #96]	; (8006420 <prvAddNewTaskToReadyList+0xc8>)
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4a15      	ldr	r2, [pc, #84]	; (8006424 <prvAddNewTaskToReadyList+0xcc>)
 80063d0:	441a      	add	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f7ff fe0c 	bl	8005ff6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063de:	f000 fd11 	bl	8006e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063e2:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <prvAddNewTaskToReadyList+0xc0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063ea:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <prvAddNewTaskToReadyList+0xbc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d207      	bcs.n	8006408 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063f8:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <prvAddNewTaskToReadyList+0xd0>)
 80063fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000388 	.word	0x20000388
 8006414:	20000288 	.word	0x20000288
 8006418:	20000394 	.word	0x20000394
 800641c:	200003a4 	.word	0x200003a4
 8006420:	20000390 	.word	0x20000390
 8006424:	2000028c 	.word	0x2000028c
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d017      	beq.n	800646e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <vTaskDelay+0x60>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <vTaskDelay+0x30>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	60bb      	str	r3, [r7, #8]
}
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800645c:	f000 f87a 	bl	8006554 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006460:	2100      	movs	r1, #0
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fb0a 	bl	8006a7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006468:	f000 f882 	bl	8006570 <xTaskResumeAll>
 800646c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d107      	bne.n	8006484 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006474:	4b06      	ldr	r3, [pc, #24]	; (8006490 <vTaskDelay+0x64>)
 8006476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	200003b0 	.word	0x200003b0
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	; 0x28
 8006498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064a2:	463a      	mov	r2, r7
 80064a4:	1d39      	adds	r1, r7, #4
 80064a6:	f107 0308 	add.w	r3, r7, #8
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fa f80c 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	9202      	str	r2, [sp, #8]
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	2300      	movs	r3, #0
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	2300      	movs	r3, #0
 80064c0:	460a      	mov	r2, r1
 80064c2:	491e      	ldr	r1, [pc, #120]	; (800653c <vTaskStartScheduler+0xa8>)
 80064c4:	481e      	ldr	r0, [pc, #120]	; (8006540 <vTaskStartScheduler+0xac>)
 80064c6:	f7ff fe1d 	bl	8006104 <xTaskCreateStatic>
 80064ca:	4603      	mov	r3, r0
 80064cc:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <vTaskStartScheduler+0xb0>)
 80064ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064d0:	4b1c      	ldr	r3, [pc, #112]	; (8006544 <vTaskStartScheduler+0xb0>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064d8:	2301      	movs	r3, #1
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	e001      	b.n	80064e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d116      	bne.n	8006516 <vTaskStartScheduler+0x82>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	613b      	str	r3, [r7, #16]
}
 80064fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064fc:	4b12      	ldr	r3, [pc, #72]	; (8006548 <vTaskStartScheduler+0xb4>)
 80064fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006502:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006504:	4b11      	ldr	r3, [pc, #68]	; (800654c <vTaskStartScheduler+0xb8>)
 8006506:	2201      	movs	r2, #1
 8006508:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800650a:	4b11      	ldr	r3, [pc, #68]	; (8006550 <vTaskStartScheduler+0xbc>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006510:	f000 fba6 	bl	8006c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006514:	e00e      	b.n	8006534 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d10a      	bne.n	8006534 <vTaskStartScheduler+0xa0>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	60fb      	str	r3, [r7, #12]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <vTaskStartScheduler+0x9e>
}
 8006534:	bf00      	nop
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	080073c0 	.word	0x080073c0
 8006540:	080068d1 	.word	0x080068d1
 8006544:	200003ac 	.word	0x200003ac
 8006548:	200003a8 	.word	0x200003a8
 800654c:	20000394 	.word	0x20000394
 8006550:	2000038c 	.word	0x2000038c

08006554 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006558:	4b04      	ldr	r3, [pc, #16]	; (800656c <vTaskSuspendAll+0x18>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3301      	adds	r3, #1
 800655e:	4a03      	ldr	r2, [pc, #12]	; (800656c <vTaskSuspendAll+0x18>)
 8006560:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006562:	bf00      	nop
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	200003b0 	.word	0x200003b0

08006570 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800657a:	2300      	movs	r3, #0
 800657c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800657e:	4b41      	ldr	r3, [pc, #260]	; (8006684 <xTaskResumeAll+0x114>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <xTaskResumeAll+0x2c>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	603b      	str	r3, [r7, #0]
}
 8006598:	bf00      	nop
 800659a:	e7fe      	b.n	800659a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800659c:	f000 fc02 	bl	8006da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065a0:	4b38      	ldr	r3, [pc, #224]	; (8006684 <xTaskResumeAll+0x114>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	4a37      	ldr	r2, [pc, #220]	; (8006684 <xTaskResumeAll+0x114>)
 80065a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065aa:	4b36      	ldr	r3, [pc, #216]	; (8006684 <xTaskResumeAll+0x114>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d161      	bne.n	8006676 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065b2:	4b35      	ldr	r3, [pc, #212]	; (8006688 <xTaskResumeAll+0x118>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d05d      	beq.n	8006676 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ba:	e02e      	b.n	800661a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065bc:	4b33      	ldr	r3, [pc, #204]	; (800668c <xTaskResumeAll+0x11c>)
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3318      	adds	r3, #24
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff fd71 	bl	80060b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7ff fd6c 	bl	80060b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	2201      	movs	r2, #1
 80065de:	409a      	lsls	r2, r3
 80065e0:	4b2b      	ldr	r3, [pc, #172]	; (8006690 <xTaskResumeAll+0x120>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	4a2a      	ldr	r2, [pc, #168]	; (8006690 <xTaskResumeAll+0x120>)
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4a27      	ldr	r2, [pc, #156]	; (8006694 <xTaskResumeAll+0x124>)
 80065f8:	441a      	add	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3304      	adds	r3, #4
 80065fe:	4619      	mov	r1, r3
 8006600:	4610      	mov	r0, r2
 8006602:	f7ff fcf8 	bl	8005ff6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660a:	4b23      	ldr	r3, [pc, #140]	; (8006698 <xTaskResumeAll+0x128>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	429a      	cmp	r2, r3
 8006612:	d302      	bcc.n	800661a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006614:	4b21      	ldr	r3, [pc, #132]	; (800669c <xTaskResumeAll+0x12c>)
 8006616:	2201      	movs	r2, #1
 8006618:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800661a:	4b1c      	ldr	r3, [pc, #112]	; (800668c <xTaskResumeAll+0x11c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1cc      	bne.n	80065bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006628:	f000 fa08 	bl	8006a3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800662c:	4b1c      	ldr	r3, [pc, #112]	; (80066a0 <xTaskResumeAll+0x130>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d010      	beq.n	800665a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006638:	f000 f836 	bl	80066a8 <xTaskIncrementTick>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006642:	4b16      	ldr	r3, [pc, #88]	; (800669c <xTaskResumeAll+0x12c>)
 8006644:	2201      	movs	r2, #1
 8006646:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3b01      	subs	r3, #1
 800664c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1f1      	bne.n	8006638 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006654:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <xTaskResumeAll+0x130>)
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800665a:	4b10      	ldr	r3, [pc, #64]	; (800669c <xTaskResumeAll+0x12c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d009      	beq.n	8006676 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006662:	2301      	movs	r3, #1
 8006664:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006666:	4b0f      	ldr	r3, [pc, #60]	; (80066a4 <xTaskResumeAll+0x134>)
 8006668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006676:	f000 fbc5 	bl	8006e04 <vPortExitCritical>

	return xAlreadyYielded;
 800667a:	68bb      	ldr	r3, [r7, #8]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	200003b0 	.word	0x200003b0
 8006688:	20000388 	.word	0x20000388
 800668c:	20000348 	.word	0x20000348
 8006690:	20000390 	.word	0x20000390
 8006694:	2000028c 	.word	0x2000028c
 8006698:	20000288 	.word	0x20000288
 800669c:	2000039c 	.word	0x2000039c
 80066a0:	20000398 	.word	0x20000398
 80066a4:	e000ed04 	.word	0xe000ed04

080066a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b2:	4b4e      	ldr	r3, [pc, #312]	; (80067ec <xTaskIncrementTick+0x144>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f040 808e 	bne.w	80067d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066bc:	4b4c      	ldr	r3, [pc, #304]	; (80067f0 <xTaskIncrementTick+0x148>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3301      	adds	r3, #1
 80066c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066c4:	4a4a      	ldr	r2, [pc, #296]	; (80067f0 <xTaskIncrementTick+0x148>)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d120      	bne.n	8006712 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80066d0:	4b48      	ldr	r3, [pc, #288]	; (80067f4 <xTaskIncrementTick+0x14c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	603b      	str	r3, [r7, #0]
}
 80066ec:	bf00      	nop
 80066ee:	e7fe      	b.n	80066ee <xTaskIncrementTick+0x46>
 80066f0:	4b40      	ldr	r3, [pc, #256]	; (80067f4 <xTaskIncrementTick+0x14c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	4b40      	ldr	r3, [pc, #256]	; (80067f8 <xTaskIncrementTick+0x150>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a3e      	ldr	r2, [pc, #248]	; (80067f4 <xTaskIncrementTick+0x14c>)
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	4a3e      	ldr	r2, [pc, #248]	; (80067f8 <xTaskIncrementTick+0x150>)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	4b3d      	ldr	r3, [pc, #244]	; (80067fc <xTaskIncrementTick+0x154>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3301      	adds	r3, #1
 800670a:	4a3c      	ldr	r2, [pc, #240]	; (80067fc <xTaskIncrementTick+0x154>)
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	f000 f995 	bl	8006a3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006712:	4b3b      	ldr	r3, [pc, #236]	; (8006800 <xTaskIncrementTick+0x158>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	429a      	cmp	r2, r3
 800671a:	d348      	bcc.n	80067ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800671c:	4b35      	ldr	r3, [pc, #212]	; (80067f4 <xTaskIncrementTick+0x14c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006726:	4b36      	ldr	r3, [pc, #216]	; (8006800 <xTaskIncrementTick+0x158>)
 8006728:	f04f 32ff 	mov.w	r2, #4294967295
 800672c:	601a      	str	r2, [r3, #0]
					break;
 800672e:	e03e      	b.n	80067ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006730:	4b30      	ldr	r3, [pc, #192]	; (80067f4 <xTaskIncrementTick+0x14c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	429a      	cmp	r2, r3
 8006746:	d203      	bcs.n	8006750 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006748:	4a2d      	ldr	r2, [pc, #180]	; (8006800 <xTaskIncrementTick+0x158>)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800674e:	e02e      	b.n	80067ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	3304      	adds	r3, #4
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff fcab 	bl	80060b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	2b00      	cmp	r3, #0
 8006760:	d004      	beq.n	800676c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	3318      	adds	r3, #24
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff fca2 	bl	80060b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	2201      	movs	r2, #1
 8006772:	409a      	lsls	r2, r3
 8006774:	4b23      	ldr	r3, [pc, #140]	; (8006804 <xTaskIncrementTick+0x15c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4313      	orrs	r3, r2
 800677a:	4a22      	ldr	r2, [pc, #136]	; (8006804 <xTaskIncrementTick+0x15c>)
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4a1f      	ldr	r2, [pc, #124]	; (8006808 <xTaskIncrementTick+0x160>)
 800678c:	441a      	add	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	3304      	adds	r3, #4
 8006792:	4619      	mov	r1, r3
 8006794:	4610      	mov	r0, r2
 8006796:	f7ff fc2e 	bl	8005ff6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679e:	4b1b      	ldr	r3, [pc, #108]	; (800680c <xTaskIncrementTick+0x164>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d3b9      	bcc.n	800671c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067a8:	2301      	movs	r3, #1
 80067aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ac:	e7b6      	b.n	800671c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067ae:	4b17      	ldr	r3, [pc, #92]	; (800680c <xTaskIncrementTick+0x164>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4914      	ldr	r1, [pc, #80]	; (8006808 <xTaskIncrementTick+0x160>)
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d901      	bls.n	80067ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80067c6:	2301      	movs	r3, #1
 80067c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067ca:	4b11      	ldr	r3, [pc, #68]	; (8006810 <xTaskIncrementTick+0x168>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80067d2:	2301      	movs	r3, #1
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	e004      	b.n	80067e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067d8:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <xTaskIncrementTick+0x16c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	4a0d      	ldr	r2, [pc, #52]	; (8006814 <xTaskIncrementTick+0x16c>)
 80067e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067e2:	697b      	ldr	r3, [r7, #20]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	200003b0 	.word	0x200003b0
 80067f0:	2000038c 	.word	0x2000038c
 80067f4:	20000340 	.word	0x20000340
 80067f8:	20000344 	.word	0x20000344
 80067fc:	200003a0 	.word	0x200003a0
 8006800:	200003a8 	.word	0x200003a8
 8006804:	20000390 	.word	0x20000390
 8006808:	2000028c 	.word	0x2000028c
 800680c:	20000288 	.word	0x20000288
 8006810:	2000039c 	.word	0x2000039c
 8006814:	20000398 	.word	0x20000398

08006818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800681e:	4b27      	ldr	r3, [pc, #156]	; (80068bc <vTaskSwitchContext+0xa4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006826:	4b26      	ldr	r3, [pc, #152]	; (80068c0 <vTaskSwitchContext+0xa8>)
 8006828:	2201      	movs	r2, #1
 800682a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800682c:	e03f      	b.n	80068ae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800682e:	4b24      	ldr	r3, [pc, #144]	; (80068c0 <vTaskSwitchContext+0xa8>)
 8006830:	2200      	movs	r2, #0
 8006832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006834:	4b23      	ldr	r3, [pc, #140]	; (80068c4 <vTaskSwitchContext+0xac>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	fab3 f383 	clz	r3, r3
 8006840:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006842:	7afb      	ldrb	r3, [r7, #11]
 8006844:	f1c3 031f 	rsb	r3, r3, #31
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	491f      	ldr	r1, [pc, #124]	; (80068c8 <vTaskSwitchContext+0xb0>)
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	440b      	add	r3, r1
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <vTaskSwitchContext+0x5c>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	607b      	str	r3, [r7, #4]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <vTaskSwitchContext+0x5a>
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4a12      	ldr	r2, [pc, #72]	; (80068c8 <vTaskSwitchContext+0xb0>)
 8006880:	4413      	add	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	3308      	adds	r3, #8
 8006896:	429a      	cmp	r2, r3
 8006898:	d104      	bne.n	80068a4 <vTaskSwitchContext+0x8c>
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	605a      	str	r2, [r3, #4]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	4a08      	ldr	r2, [pc, #32]	; (80068cc <vTaskSwitchContext+0xb4>)
 80068ac:	6013      	str	r3, [r2, #0]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	200003b0 	.word	0x200003b0
 80068c0:	2000039c 	.word	0x2000039c
 80068c4:	20000390 	.word	0x20000390
 80068c8:	2000028c 	.word	0x2000028c
 80068cc:	20000288 	.word	0x20000288

080068d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068d8:	f000 f852 	bl	8006980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <prvIdleTask+0x28>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d9f9      	bls.n	80068d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068e4:	4b05      	ldr	r3, [pc, #20]	; (80068fc <prvIdleTask+0x2c>)
 80068e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068f4:	e7f0      	b.n	80068d8 <prvIdleTask+0x8>
 80068f6:	bf00      	nop
 80068f8:	2000028c 	.word	0x2000028c
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006906:	2300      	movs	r3, #0
 8006908:	607b      	str	r3, [r7, #4]
 800690a:	e00c      	b.n	8006926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4a12      	ldr	r2, [pc, #72]	; (8006960 <prvInitialiseTaskLists+0x60>)
 8006918:	4413      	add	r3, r2
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fb3e 	bl	8005f9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3301      	adds	r3, #1
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b06      	cmp	r3, #6
 800692a:	d9ef      	bls.n	800690c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800692c:	480d      	ldr	r0, [pc, #52]	; (8006964 <prvInitialiseTaskLists+0x64>)
 800692e:	f7ff fb35 	bl	8005f9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006932:	480d      	ldr	r0, [pc, #52]	; (8006968 <prvInitialiseTaskLists+0x68>)
 8006934:	f7ff fb32 	bl	8005f9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006938:	480c      	ldr	r0, [pc, #48]	; (800696c <prvInitialiseTaskLists+0x6c>)
 800693a:	f7ff fb2f 	bl	8005f9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800693e:	480c      	ldr	r0, [pc, #48]	; (8006970 <prvInitialiseTaskLists+0x70>)
 8006940:	f7ff fb2c 	bl	8005f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006944:	480b      	ldr	r0, [pc, #44]	; (8006974 <prvInitialiseTaskLists+0x74>)
 8006946:	f7ff fb29 	bl	8005f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800694a:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <prvInitialiseTaskLists+0x78>)
 800694c:	4a05      	ldr	r2, [pc, #20]	; (8006964 <prvInitialiseTaskLists+0x64>)
 800694e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <prvInitialiseTaskLists+0x7c>)
 8006952:	4a05      	ldr	r2, [pc, #20]	; (8006968 <prvInitialiseTaskLists+0x68>)
 8006954:	601a      	str	r2, [r3, #0]
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	2000028c 	.word	0x2000028c
 8006964:	20000318 	.word	0x20000318
 8006968:	2000032c 	.word	0x2000032c
 800696c:	20000348 	.word	0x20000348
 8006970:	2000035c 	.word	0x2000035c
 8006974:	20000374 	.word	0x20000374
 8006978:	20000340 	.word	0x20000340
 800697c:	20000344 	.word	0x20000344

08006980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006986:	e019      	b.n	80069bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006988:	f000 fa0c 	bl	8006da4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <prvCheckTasksWaitingTermination+0x50>)
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3304      	adds	r3, #4
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fb89 	bl	80060b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800699e:	4b0d      	ldr	r3, [pc, #52]	; (80069d4 <prvCheckTasksWaitingTermination+0x54>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	4a0b      	ldr	r2, [pc, #44]	; (80069d4 <prvCheckTasksWaitingTermination+0x54>)
 80069a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <prvCheckTasksWaitingTermination+0x58>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	4a0a      	ldr	r2, [pc, #40]	; (80069d8 <prvCheckTasksWaitingTermination+0x58>)
 80069b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069b2:	f000 fa27 	bl	8006e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f810 	bl	80069dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <prvCheckTasksWaitingTermination+0x58>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e1      	bne.n	8006988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	2000035c 	.word	0x2000035c
 80069d4:	20000388 	.word	0x20000388
 80069d8:	20000370 	.word	0x20000370

080069dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d108      	bne.n	8006a00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fb84 	bl	8007100 <vPortFree>
				vPortFree( pxTCB );
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fb81 	bl	8007100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069fe:	e018      	b.n	8006a32 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d103      	bne.n	8006a12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fb78 	bl	8007100 <vPortFree>
	}
 8006a10:	e00f      	b.n	8006a32 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d00a      	beq.n	8006a32 <prvDeleteTCB+0x56>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	60fb      	str	r3, [r7, #12]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <prvDeleteTCB+0x54>
	}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a42:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <prvResetNextTaskUnblockTime+0x38>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <prvResetNextTaskUnblockTime+0x3c>)
 8006a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a54:	e008      	b.n	8006a68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a56:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <prvResetNextTaskUnblockTime+0x38>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	4a04      	ldr	r2, [pc, #16]	; (8006a78 <prvResetNextTaskUnblockTime+0x3c>)
 8006a66:	6013      	str	r3, [r2, #0]
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	20000340 	.word	0x20000340
 8006a78:	200003a8 	.word	0x200003a8

08006a7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a86:	4b29      	ldr	r3, [pc, #164]	; (8006b2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a8c:	4b28      	ldr	r3, [pc, #160]	; (8006b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7ff fb0c 	bl	80060b0 <uxListRemove>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a9e:	4b24      	ldr	r3, [pc, #144]	; (8006b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	43da      	mvns	r2, r3
 8006aac:	4b21      	ldr	r3, [pc, #132]	; (8006b34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	4a20      	ldr	r2, [pc, #128]	; (8006b34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ab4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abc:	d10a      	bne.n	8006ad4 <prvAddCurrentTaskToDelayedList+0x58>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d007      	beq.n	8006ad4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ac4:	4b1a      	ldr	r3, [pc, #104]	; (8006b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	4619      	mov	r1, r3
 8006acc:	481a      	ldr	r0, [pc, #104]	; (8006b38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006ace:	f7ff fa92 	bl	8005ff6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ad2:	e026      	b.n	8006b22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4413      	add	r3, r2
 8006ada:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006adc:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d209      	bcs.n	8006b00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aec:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3304      	adds	r3, #4
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f7ff faa0 	bl	800603e <vListInsert>
}
 8006afe:	e010      	b.n	8006b22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b00:	4b0f      	ldr	r3, [pc, #60]	; (8006b40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	f7ff fa96 	bl	800603e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b12:	4b0c      	ldr	r3, [pc, #48]	; (8006b44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d202      	bcs.n	8006b22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006b1c:	4a09      	ldr	r2, [pc, #36]	; (8006b44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6013      	str	r3, [r2, #0]
}
 8006b22:	bf00      	nop
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	2000038c 	.word	0x2000038c
 8006b30:	20000288 	.word	0x20000288
 8006b34:	20000390 	.word	0x20000390
 8006b38:	20000374 	.word	0x20000374
 8006b3c:	20000344 	.word	0x20000344
 8006b40:	20000340 	.word	0x20000340
 8006b44:	200003a8 	.word	0x200003a8

08006b48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3b04      	subs	r3, #4
 8006b58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3b04      	subs	r3, #4
 8006b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f023 0201 	bic.w	r2, r3, #1
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3b04      	subs	r3, #4
 8006b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b78:	4a0c      	ldr	r2, [pc, #48]	; (8006bac <pxPortInitialiseStack+0x64>)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3b14      	subs	r3, #20
 8006b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3b04      	subs	r3, #4
 8006b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f06f 0202 	mvn.w	r2, #2
 8006b96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3b20      	subs	r3, #32
 8006b9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	08006bb1 	.word	0x08006bb1

08006bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bba:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <prvTaskExitError+0x54>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d00a      	beq.n	8006bda <prvTaskExitError+0x2a>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	60fb      	str	r3, [r7, #12]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <prvTaskExitError+0x28>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	60bb      	str	r3, [r7, #8]
}
 8006bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bee:	bf00      	nop
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0fc      	beq.n	8006bf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	2000000c 	.word	0x2000000c
	...

08006c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c10:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <pxCurrentTCBConst2>)
 8006c12:	6819      	ldr	r1, [r3, #0]
 8006c14:	6808      	ldr	r0, [r1, #0]
 8006c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1a:	f380 8809 	msr	PSP, r0
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f04f 0000 	mov.w	r0, #0
 8006c26:	f380 8811 	msr	BASEPRI, r0
 8006c2a:	4770      	bx	lr
 8006c2c:	f3af 8000 	nop.w

08006c30 <pxCurrentTCBConst2>:
 8006c30:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop

08006c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c38:	4808      	ldr	r0, [pc, #32]	; (8006c5c <prvPortStartFirstTask+0x24>)
 8006c3a:	6800      	ldr	r0, [r0, #0]
 8006c3c:	6800      	ldr	r0, [r0, #0]
 8006c3e:	f380 8808 	msr	MSP, r0
 8006c42:	f04f 0000 	mov.w	r0, #0
 8006c46:	f380 8814 	msr	CONTROL, r0
 8006c4a:	b662      	cpsie	i
 8006c4c:	b661      	cpsie	f
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	df00      	svc	0
 8006c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c5a:	bf00      	nop
 8006c5c:	e000ed08 	.word	0xe000ed08

08006c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c66:	4b46      	ldr	r3, [pc, #280]	; (8006d80 <xPortStartScheduler+0x120>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a46      	ldr	r2, [pc, #280]	; (8006d84 <xPortStartScheduler+0x124>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d10a      	bne.n	8006c86 <xPortStartScheduler+0x26>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	613b      	str	r3, [r7, #16]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c86:	4b3e      	ldr	r3, [pc, #248]	; (8006d80 <xPortStartScheduler+0x120>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a3f      	ldr	r2, [pc, #252]	; (8006d88 <xPortStartScheduler+0x128>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10a      	bne.n	8006ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	60fb      	str	r3, [r7, #12]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ca6:	4b39      	ldr	r3, [pc, #228]	; (8006d8c <xPortStartScheduler+0x12c>)
 8006ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	22ff      	movs	r2, #255	; 0xff
 8006cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	4b31      	ldr	r3, [pc, #196]	; (8006d90 <xPortStartScheduler+0x130>)
 8006ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cce:	4b31      	ldr	r3, [pc, #196]	; (8006d94 <xPortStartScheduler+0x134>)
 8006cd0:	2207      	movs	r2, #7
 8006cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cd4:	e009      	b.n	8006cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006cd6:	4b2f      	ldr	r3, [pc, #188]	; (8006d94 <xPortStartScheduler+0x134>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	4a2d      	ldr	r2, [pc, #180]	; (8006d94 <xPortStartScheduler+0x134>)
 8006cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d0ef      	beq.n	8006cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cf6:	4b27      	ldr	r3, [pc, #156]	; (8006d94 <xPortStartScheduler+0x134>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f1c3 0307 	rsb	r3, r3, #7
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d00a      	beq.n	8006d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	60bb      	str	r3, [r7, #8]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d18:	4b1e      	ldr	r3, [pc, #120]	; (8006d94 <xPortStartScheduler+0x134>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	021b      	lsls	r3, r3, #8
 8006d1e:	4a1d      	ldr	r2, [pc, #116]	; (8006d94 <xPortStartScheduler+0x134>)
 8006d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d22:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <xPortStartScheduler+0x134>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d2a:	4a1a      	ldr	r2, [pc, #104]	; (8006d94 <xPortStartScheduler+0x134>)
 8006d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d36:	4b18      	ldr	r3, [pc, #96]	; (8006d98 <xPortStartScheduler+0x138>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a17      	ldr	r2, [pc, #92]	; (8006d98 <xPortStartScheduler+0x138>)
 8006d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d42:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <xPortStartScheduler+0x138>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a14      	ldr	r2, [pc, #80]	; (8006d98 <xPortStartScheduler+0x138>)
 8006d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d4e:	f000 f8dd 	bl	8006f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d52:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <xPortStartScheduler+0x13c>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d58:	f000 f8fc 	bl	8006f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d5c:	4b10      	ldr	r3, [pc, #64]	; (8006da0 <xPortStartScheduler+0x140>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a0f      	ldr	r2, [pc, #60]	; (8006da0 <xPortStartScheduler+0x140>)
 8006d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d68:	f7ff ff66 	bl	8006c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d6c:	f7ff fd54 	bl	8006818 <vTaskSwitchContext>
	prvTaskExitError();
 8006d70:	f7ff ff1e 	bl	8006bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	e000ed00 	.word	0xe000ed00
 8006d84:	410fc271 	.word	0x410fc271
 8006d88:	410fc270 	.word	0x410fc270
 8006d8c:	e000e400 	.word	0xe000e400
 8006d90:	200003b4 	.word	0x200003b4
 8006d94:	200003b8 	.word	0x200003b8
 8006d98:	e000ed20 	.word	0xe000ed20
 8006d9c:	2000000c 	.word	0x2000000c
 8006da0:	e000ef34 	.word	0xe000ef34

08006da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	607b      	str	r3, [r7, #4]
}
 8006dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <vPortEnterCritical+0x58>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	4a0d      	ldr	r2, [pc, #52]	; (8006dfc <vPortEnterCritical+0x58>)
 8006dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dc8:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <vPortEnterCritical+0x58>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d10f      	bne.n	8006df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <vPortEnterCritical+0x5c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	603b      	str	r3, [r7, #0]
}
 8006dec:	bf00      	nop
 8006dee:	e7fe      	b.n	8006dee <vPortEnterCritical+0x4a>
	}
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	2000000c 	.word	0x2000000c
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e0a:	4b12      	ldr	r3, [pc, #72]	; (8006e54 <vPortExitCritical+0x50>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10a      	bne.n	8006e28 <vPortExitCritical+0x24>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	607b      	str	r3, [r7, #4]
}
 8006e24:	bf00      	nop
 8006e26:	e7fe      	b.n	8006e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e28:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <vPortExitCritical+0x50>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	4a09      	ldr	r2, [pc, #36]	; (8006e54 <vPortExitCritical+0x50>)
 8006e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e32:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <vPortExitCritical+0x50>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d105      	bne.n	8006e46 <vPortExitCritical+0x42>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	2000000c 	.word	0x2000000c
	...

08006e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e60:	f3ef 8009 	mrs	r0, PSP
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <pxCurrentTCBConst>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	f01e 0f10 	tst.w	lr, #16
 8006e70:	bf08      	it	eq
 8006e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7a:	6010      	str	r0, [r2, #0]
 8006e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e84:	f380 8811 	msr	BASEPRI, r0
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f7ff fcc2 	bl	8006818 <vTaskSwitchContext>
 8006e94:	f04f 0000 	mov.w	r0, #0
 8006e98:	f380 8811 	msr	BASEPRI, r0
 8006e9c:	bc09      	pop	{r0, r3}
 8006e9e:	6819      	ldr	r1, [r3, #0]
 8006ea0:	6808      	ldr	r0, [r1, #0]
 8006ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea6:	f01e 0f10 	tst.w	lr, #16
 8006eaa:	bf08      	it	eq
 8006eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006eb0:	f380 8809 	msr	PSP, r0
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	f3af 8000 	nop.w

08006ec0 <pxCurrentTCBConst>:
 8006ec0:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop

08006ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	607b      	str	r3, [r7, #4]
}
 8006ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ee2:	f7ff fbe1 	bl	80066a8 <xTaskIncrementTick>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <SysTick_Handler+0x40>)
 8006eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f383 8811 	msr	BASEPRI, r3
}
 8006efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <vPortSetupTimerInterrupt+0x34>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f16:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <vPortSetupTimerInterrupt+0x38>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <vPortSetupTimerInterrupt+0x3c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <vPortSetupTimerInterrupt+0x40>)
 8006f22:	fba2 2303 	umull	r2, r3, r2, r3
 8006f26:	099b      	lsrs	r3, r3, #6
 8006f28:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <vPortSetupTimerInterrupt+0x44>)
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f2e:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <vPortSetupTimerInterrupt+0x34>)
 8006f30:	2207      	movs	r2, #7
 8006f32:	601a      	str	r2, [r3, #0]
}
 8006f34:	bf00      	nop
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	e000e010 	.word	0xe000e010
 8006f44:	e000e018 	.word	0xe000e018
 8006f48:	20000000 	.word	0x20000000
 8006f4c:	10624dd3 	.word	0x10624dd3
 8006f50:	e000e014 	.word	0xe000e014

08006f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f64 <vPortEnableVFP+0x10>
 8006f58:	6801      	ldr	r1, [r0, #0]
 8006f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f5e:	6001      	str	r1, [r0, #0]
 8006f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f62:	bf00      	nop
 8006f64:	e000ed88 	.word	0xe000ed88

08006f68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	; 0x28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f74:	f7ff faee 	bl	8006554 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f78:	4b5b      	ldr	r3, [pc, #364]	; (80070e8 <pvPortMalloc+0x180>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f80:	f000 f920 	bl	80071c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f84:	4b59      	ldr	r3, [pc, #356]	; (80070ec <pvPortMalloc+0x184>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f040 8093 	bne.w	80070b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01d      	beq.n	8006fd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f98:	2208      	movs	r2, #8
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d014      	beq.n	8006fd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f023 0307 	bic.w	r3, r3, #7
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <pvPortMalloc+0x6c>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	617b      	str	r3, [r7, #20]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d06e      	beq.n	80070b8 <pvPortMalloc+0x150>
 8006fda:	4b45      	ldr	r3, [pc, #276]	; (80070f0 <pvPortMalloc+0x188>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d869      	bhi.n	80070b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fe4:	4b43      	ldr	r3, [pc, #268]	; (80070f4 <pvPortMalloc+0x18c>)
 8006fe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006fe8:	4b42      	ldr	r3, [pc, #264]	; (80070f4 <pvPortMalloc+0x18c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fee:	e004      	b.n	8006ffa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	429a      	cmp	r2, r3
 8007002:	d903      	bls.n	800700c <pvPortMalloc+0xa4>
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1f1      	bne.n	8006ff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800700c:	4b36      	ldr	r3, [pc, #216]	; (80070e8 <pvPortMalloc+0x180>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007012:	429a      	cmp	r2, r3
 8007014:	d050      	beq.n	80070b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2208      	movs	r2, #8
 800701c:	4413      	add	r3, r2
 800701e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	2308      	movs	r3, #8
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	429a      	cmp	r2, r3
 8007036:	d91f      	bls.n	8007078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4413      	add	r3, r2
 800703e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <pvPortMalloc+0xf8>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	613b      	str	r3, [r7, #16]
}
 800705c:	bf00      	nop
 800705e:	e7fe      	b.n	800705e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	1ad2      	subs	r2, r2, r3
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007072:	69b8      	ldr	r0, [r7, #24]
 8007074:	f000 f908 	bl	8007288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007078:	4b1d      	ldr	r3, [pc, #116]	; (80070f0 <pvPortMalloc+0x188>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	4a1b      	ldr	r2, [pc, #108]	; (80070f0 <pvPortMalloc+0x188>)
 8007084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007086:	4b1a      	ldr	r3, [pc, #104]	; (80070f0 <pvPortMalloc+0x188>)
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	4b1b      	ldr	r3, [pc, #108]	; (80070f8 <pvPortMalloc+0x190>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	429a      	cmp	r2, r3
 8007090:	d203      	bcs.n	800709a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007092:	4b17      	ldr	r3, [pc, #92]	; (80070f0 <pvPortMalloc+0x188>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a18      	ldr	r2, [pc, #96]	; (80070f8 <pvPortMalloc+0x190>)
 8007098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	4b13      	ldr	r3, [pc, #76]	; (80070ec <pvPortMalloc+0x184>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80070ae:	4b13      	ldr	r3, [pc, #76]	; (80070fc <pvPortMalloc+0x194>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3301      	adds	r3, #1
 80070b4:	4a11      	ldr	r2, [pc, #68]	; (80070fc <pvPortMalloc+0x194>)
 80070b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070b8:	f7ff fa5a 	bl	8006570 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <pvPortMalloc+0x174>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	60fb      	str	r3, [r7, #12]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <pvPortMalloc+0x172>
	return pvReturn;
 80070dc:	69fb      	ldr	r3, [r7, #28]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3728      	adds	r7, #40	; 0x28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000f7c 	.word	0x20000f7c
 80070ec:	20000f90 	.word	0x20000f90
 80070f0:	20000f80 	.word	0x20000f80
 80070f4:	20000f74 	.word	0x20000f74
 80070f8:	20000f84 	.word	0x20000f84
 80070fc:	20000f88 	.word	0x20000f88

08007100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d04d      	beq.n	80071ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007112:	2308      	movs	r3, #8
 8007114:	425b      	negs	r3, r3
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	4413      	add	r3, r2
 800711a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	4b24      	ldr	r3, [pc, #144]	; (80071b8 <vPortFree+0xb8>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4013      	ands	r3, r2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <vPortFree+0x44>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	60fb      	str	r3, [r7, #12]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <vPortFree+0x62>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	60bb      	str	r3, [r7, #8]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	4b14      	ldr	r3, [pc, #80]	; (80071b8 <vPortFree+0xb8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4013      	ands	r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d01e      	beq.n	80071ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d11a      	bne.n	80071ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	4b0e      	ldr	r3, [pc, #56]	; (80071b8 <vPortFree+0xb8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	43db      	mvns	r3, r3
 8007182:	401a      	ands	r2, r3
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007188:	f7ff f9e4 	bl	8006554 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <vPortFree+0xbc>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4413      	add	r3, r2
 8007196:	4a09      	ldr	r2, [pc, #36]	; (80071bc <vPortFree+0xbc>)
 8007198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800719a:	6938      	ldr	r0, [r7, #16]
 800719c:	f000 f874 	bl	8007288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <vPortFree+0xc0>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3301      	adds	r3, #1
 80071a6:	4a06      	ldr	r2, [pc, #24]	; (80071c0 <vPortFree+0xc0>)
 80071a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80071aa:	f7ff f9e1 	bl	8006570 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071ae:	bf00      	nop
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20000f90 	.word	0x20000f90
 80071bc:	20000f80 	.word	0x20000f80
 80071c0:	20000f8c 	.word	0x20000f8c

080071c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80071ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071d0:	4b27      	ldr	r3, [pc, #156]	; (8007270 <prvHeapInit+0xac>)
 80071d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00c      	beq.n	80071f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3307      	adds	r3, #7
 80071e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0307 	bic.w	r3, r3, #7
 80071ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	4a1f      	ldr	r2, [pc, #124]	; (8007270 <prvHeapInit+0xac>)
 80071f4:	4413      	add	r3, r2
 80071f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071fc:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <prvHeapInit+0xb0>)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007202:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <prvHeapInit+0xb0>)
 8007204:	2200      	movs	r2, #0
 8007206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	4413      	add	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007210:	2208      	movs	r2, #8
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0307 	bic.w	r3, r3, #7
 800721e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a15      	ldr	r2, [pc, #84]	; (8007278 <prvHeapInit+0xb4>)
 8007224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007226:	4b14      	ldr	r3, [pc, #80]	; (8007278 <prvHeapInit+0xb4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2200      	movs	r2, #0
 800722c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <prvHeapInit+0xb4>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007244:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <prvHeapInit+0xb4>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	4a0a      	ldr	r2, [pc, #40]	; (800727c <prvHeapInit+0xb8>)
 8007252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	4a09      	ldr	r2, [pc, #36]	; (8007280 <prvHeapInit+0xbc>)
 800725a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800725c:	4b09      	ldr	r3, [pc, #36]	; (8007284 <prvHeapInit+0xc0>)
 800725e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007262:	601a      	str	r2, [r3, #0]
}
 8007264:	bf00      	nop
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	200003bc 	.word	0x200003bc
 8007274:	20000f74 	.word	0x20000f74
 8007278:	20000f7c 	.word	0x20000f7c
 800727c:	20000f84 	.word	0x20000f84
 8007280:	20000f80 	.word	0x20000f80
 8007284:	20000f90 	.word	0x20000f90

08007288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007290:	4b28      	ldr	r3, [pc, #160]	; (8007334 <prvInsertBlockIntoFreeList+0xac>)
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e002      	b.n	800729c <prvInsertBlockIntoFreeList+0x14>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d8f7      	bhi.n	8007296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	4413      	add	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d108      	bne.n	80072ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	441a      	add	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d118      	bne.n	8007310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <prvInsertBlockIntoFreeList+0xb0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d00d      	beq.n	8007306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	441a      	add	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	e008      	b.n	8007318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007306:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <prvInsertBlockIntoFreeList+0xb0>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	e003      	b.n	8007318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d002      	beq.n	8007326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007326:	bf00      	nop
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000f74 	.word	0x20000f74
 8007338:	20000f7c 	.word	0x20000f7c

0800733c <__libc_init_array>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	4d0d      	ldr	r5, [pc, #52]	; (8007374 <__libc_init_array+0x38>)
 8007340:	4c0d      	ldr	r4, [pc, #52]	; (8007378 <__libc_init_array+0x3c>)
 8007342:	1b64      	subs	r4, r4, r5
 8007344:	10a4      	asrs	r4, r4, #2
 8007346:	2600      	movs	r6, #0
 8007348:	42a6      	cmp	r6, r4
 800734a:	d109      	bne.n	8007360 <__libc_init_array+0x24>
 800734c:	4d0b      	ldr	r5, [pc, #44]	; (800737c <__libc_init_array+0x40>)
 800734e:	4c0c      	ldr	r4, [pc, #48]	; (8007380 <__libc_init_array+0x44>)
 8007350:	f000 f820 	bl	8007394 <_init>
 8007354:	1b64      	subs	r4, r4, r5
 8007356:	10a4      	asrs	r4, r4, #2
 8007358:	2600      	movs	r6, #0
 800735a:	42a6      	cmp	r6, r4
 800735c:	d105      	bne.n	800736a <__libc_init_array+0x2e>
 800735e:	bd70      	pop	{r4, r5, r6, pc}
 8007360:	f855 3b04 	ldr.w	r3, [r5], #4
 8007364:	4798      	blx	r3
 8007366:	3601      	adds	r6, #1
 8007368:	e7ee      	b.n	8007348 <__libc_init_array+0xc>
 800736a:	f855 3b04 	ldr.w	r3, [r5], #4
 800736e:	4798      	blx	r3
 8007370:	3601      	adds	r6, #1
 8007372:	e7f2      	b.n	800735a <__libc_init_array+0x1e>
 8007374:	08007418 	.word	0x08007418
 8007378:	08007418 	.word	0x08007418
 800737c:	08007418 	.word	0x08007418
 8007380:	0800741c 	.word	0x0800741c

08007384 <memset>:
 8007384:	4402      	add	r2, r0
 8007386:	4603      	mov	r3, r0
 8007388:	4293      	cmp	r3, r2
 800738a:	d100      	bne.n	800738e <memset+0xa>
 800738c:	4770      	bx	lr
 800738e:	f803 1b01 	strb.w	r1, [r3], #1
 8007392:	e7f9      	b.n	8007388 <memset+0x4>

08007394 <_init>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	bf00      	nop
 8007398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739a:	bc08      	pop	{r3}
 800739c:	469e      	mov	lr, r3
 800739e:	4770      	bx	lr

080073a0 <_fini>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	bf00      	nop
 80073a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a6:	bc08      	pop	{r3}
 80073a8:	469e      	mov	lr, r3
 80073aa:	4770      	bx	lr
